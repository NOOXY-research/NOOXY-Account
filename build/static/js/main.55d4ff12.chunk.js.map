{"version":3,"sources":["flux/lib/dispatcher.js","flux/dispatcher.js","flux/service.js","flux/NSc.js","flux/index.js","components/HomePage/index.js","components/AuthPages/index.js","App/index.js","serviceWorker.js","index.js"],"names":["invariant","require","Dispatcher","Object","classCallCheck","this","_callbacks","_isDispatching","_isHandled","_isPending","_lastID","callback","id","ids","ii","length","_invokeCallback","payload","_startDispatching","_stopDispatching","_pendingPayload","flux_dispatcher","generateDispatcher","setState","_dispatcher","register","type","lang","data","localizes","UserMeta","Service","NoService","_this","Services","NoUser","Actions","updateLang","dispatch","updateLocalizes","updateUserMeta","log","console","logout","start","next","Localizes","setupOnline","createActivitySocket","err","call","meta","JSON","stringify","e","setTimeout","String","prototype","replaceAll","search","replacement","split","join","Buf","alloc","encode","Uint8Array","TextEncoder","arguments","undefined","decode","TextDecoder","concat","len","_len","args","Array","_key","i","result","set","isBuffer","NSc","targetip","method","targetport","setCookie","cname","cvalue","exdays","d","Date","setTime","getTime","expires","toUTCString","document","cookie","getCookie","name","ca","c","charAt","substring","indexOf","eraseCookie","settings","verbose","debug","user","secure","NSc_files_root","connmethod","Constants","version","NSP_version","copyright","CONNECTION_METHOD_NAME_MAP","TCP","WebSocket","WebSocketSecure","Local","TCP/IP","ws","wss","local","Utils","getQueryVariable","variable","vars","window","location","pair","Base64toArrayBuffer","b64str","raw","atob","rawLength","array","ArrayBuffer","charCodeAt","convertPemToBinary","pem","lines","encoded","trim","ArrayBuffertoBase64","buffer","binary","bytes","byteLength","fromCharCode","btoa","printLOGO","TagLog","tag","logstring","generateUniqueId","Math","random","toString","substr","generateGUID","s4","floor","searchObject","object","value","prop","hasOwnProperty","Connections","Client","ConnectionProfile","_debug","_ws","setDebug","closeConnetion","close","onData","connprofile","onClose","send","connect","ip","port","binaryType","onopen","onmessage","event","onerror","error","onclose","_this2","Connection","options","_this4","allow_ssl_self_signed","process","NODE_TLS_REJECT_UNAUTHORIZED","ssl_priv_key","ssl_cert","_conn_meth_name_map","_servers","_clients","_have_local_server","uint16_heartbeat_phrase","heartbeat_cycle","serverId","Rpos","connMethod","hostip","hostport","clientip","conn","_this3","_serverId","_pos","_connMethod","_bundle","_GUID","_hostip","_hostport","_clientip","_conn","getServerId","getHostIP","getHostPort","getClientIP","getConnMethod","getRemotePosition","setBundle","key","getBundle","getConn","getGUID","returnServerId","returnHostIP","returnHostPort","returnClientIP","returnConnMethod","returnRemotePosition","returnBundle","returnConn","returnGUID","destroy","worker_cancel_refer","addServer","conn_method","server","Server","keys","setInterval","broadcast","createClient","remoteip","onData_wrapped","_prev_client","locc","netc","addConnetionModule","constructor","ConnectMethod","forEach","conn_profile","getServers","getClients","killClient","bool","importSSLCert","ssl_cert_in","importSSLPrivateKey","ssl_priv_key_in","importHeartBeatCycle","cycle","importConnectionMethodNameMap","dict","Protocols","coregateway","emitRequest","Protocol","Positions","rq","rs","Implementation","Entity","Utilities","AuthorizationHandler","_handler","PW","emitResponse","AuthbyPassword","PF","AuthbyPasswordFailed","TK","AuthbyToken","TF","AuthbyTokenFailed","SI","Signin","AF","RequestHandler","blob","parse","m","Activity","_ActivityRsCEcallbacks","_to_blob","blob_back","blob_front","slice","on","owner","mode","service","daemon_authkey","_data","t","o","s","od","k","entityId","tempid","n","ResponseHandler","blob_data","parseInt","json_data","_parse_blob","VE","launchActivitySocketByEntityId","emitASClose","SS","BS","emitBSFReturn","SF","emitSFReturn","CE","onToken","u","AS","emitASData","BE","emitASBlobEvent","EV","emitASEvent","CS","Router","_coregateway","_this5","_json_sniffers","_raw_sniffers","_tellJSONSniffers","Json","_senddata","session","blobfinal","NSPS","isConnectionSecured","secured","encrypt","encrypted","stack","methods","addJSONSniffer","push","addRAWSniffer","importCore","Settings","_tellRAWSniffers","decrypt","decrypted","er","emitConnectionClose","pt","p","pos","protocol","_sessionnotsupport","getClientConnProfile","json","sendRouterData","addProtocol","SocketPair","ActivitySocket","service_name","emitter","unbindActivitySocketList","_entity_id","_this6","_emitdata","Data","_emit_sfunc","ServiceFunction","_emit_blob_sfunc","BlobServiceFunction","_emitclose","Close","_launched","wait_ops","_sfqueue","_bsfqueue","_on_dict","_on_event","_on_blob_event","exec","launch","setEntityId","entities_prev","returnvalue","callBlob","returnblob","getEntityId","sendData","onEvent","onBlobEvent","_emitData","_emitBlobEvent","_emitSFReturn","_emitBSFReturn","_emitEvent","_emitClose","remoteClosed","bundle","splice","_daemon_auth_key","_emmiter","_this7","ActivitySocketDestroyTimeout","_ASockets","_admin_name","_on_handler","_unbindActivitySocketList","_as","prev","Error","createAdminDaemonActivitySocket","createDaemonActivitySocket","_entitiesId","_loop","setDefaultUsername","username","importDaemonAuthKey","_this8","importImplementation","_len2","_key2","returnImplement","apply","_len3","_key3","_len4","_key4","_len5","_key5","_implts","signin","signup","status","token","setImplement","getImplement","returnImplementBundle","_rsa_pub","_crypto_module","_this9","_resumes","_operation_timeout","host_rsa_pub","client_random_num","returnRandomInt","generateAESCBC256KeyByHash","aes_key","r","a","encryptString","upgradeConnection","succeess","importOperationTimeout","timeout","importCryptoModule","crypto_module","importRSA2048KeyPair","rsa_priv","rsa_pub","NoCrypto","_algo","AESCBC256","keystr","toEncrypt","crypto","subtle","importKey","then","iv","getRandomValues","catch","err2","decryptString","toDecrypt","salt","message","RSA2048","publicKey","hash","max","string1","string2","digest","algo","_core","_this10","_connection","_authorizationhandler","_router","_activity","_implementation","_nsps","_nocrypto","setupDefaultImplementation","importOwner","replace","href","Username","reload","v","open","getDefaultClientConnProfile","getImplementationModule","uname","returnOwner","boo","setUsername","returnUsername","init","DEBUG","NSClient","noservice","host","Flux","enqueueSnackbar","useStyles","makeStyles","avatar","marginBottom","width","height","card","minWidth","bullet","display","margin","transform","title","fontSize","capitalize","toUpperCase","HomePage","props","classes","react_default","createElement","Grid","container","justify","alignItems","spacing","item","xs","Avatar","className","user_meta","Typography","variant","component","localize","welcome","firstname","lastname","Card","homeCard","CardContent","quick_access","List","root","ListItem","ListItemIcon","Person_default","ListItemText","primary","secondary","Button","color","Divider","userid","phone_number","phonenumber","email","Code_default","noshell","CardActions","Copyright","align","getFullYear","Link","theme","@global","body","backgroundColor","palette","common","white","paper","marginTop","flexDirection","main","form","submit","SignInPage","_React$useState","React","useState","_React$useState2","slicedToArray","_React$useState3","_React$useState4","password","setPassword","_React$useState5","_React$useState6","setStatus","Container","maxWidth","CssBaseline","LockOutlined_default","noValidate","TextField","onChange","evt","target","updateUsernameInputValue","required","fullWidth","label","autoComplete","autoFocus","updatePasswordInputValue","preventDefault","onClick","implement_module","onFinish","Box","mt","PasswordPage","_React$useState7","_React$useState8","_React$useState9","_React$useState10","InputProps","readOnly","ROOT_PATH","root_path","createMuiTheme","blue","typography","useNextVariants","menuButton","marginLeft","marginRight","App","possibleConstructorReturn","getPrototypeOf","toggleDrawer","DrawerOpened","controller","bind","assertThisInitialized","actions","state","NSimplementation","data_sender","history","sideList","drawerList","button","account","ListItemAvatar","Home_default","home","AccountCircle_default","edit_my_account","ExitToApp_default","react_router_dom","basename","MuiThemeProvider","react_router","exact","path","render","SignupURL","goBack","AppBar","headerBar","position","Toolbar","IconButton","aria-label","Menu_default","noWrap","drawer","Hidden","smUp","implementation","SwipeableDrawer","onOpen","xsDown","content","style","minHeight","to","Component","withStyles","_homeCardWrapper","boxShadow","defineProperty","breakpoints","up","flexShrink","flexGrow","padding","verticalAlign","homeCardWrapper","columnCount","columnGap","down","mixins","toolbar","Boolean","hostname","match","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wOAcIA,EAAYC,EAAQ,IAkOTC,aA7Hb,SAAAA,IAAeC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GACbG,KAAKC,WAAa,GAClBD,KAAKE,gBAAiB,EACtBF,KAAKG,WAAa,GAClBH,KAAKI,WAAa,GAClBJ,KAAKK,QAAU,uDAORC,GACP,IAAIC,EA9GM,MA8GSP,KAAKK,UAExB,OADAL,KAAKC,WAAWM,GAAMD,EACfC,qCAMEA,GACTZ,EACEK,KAAKC,WAAWM,GAChB,0EACAA,UAEKP,KAAKC,WAAWM,mCAQjBC,GACNb,EACEK,KAAKE,eACL,+DAEF,IAAK,IAAIO,EAAK,EAAGA,EAAKD,EAAIE,OAAQD,IAAM,CACtC,IAAIF,EAAKC,EAAIC,GACTT,KAAKI,WAAWG,GAClBZ,EACEK,KAAKG,WAAWI,GAChB,gFAEAA,IAIJZ,EACEK,KAAKC,WAAWM,GAChB,uEACAA,GAEFP,KAAKW,gBAAgBJ,sCAOhBK,GACPjB,GACGK,KAAKE,eACN,wEAEFF,KAAKa,kBAAkBD,GACvB,IACE,IAAK,IAAIL,KAAMP,KAAKC,WACdD,KAAKI,WAAWG,IAGpBP,KAAKW,gBAAgBJ,GALzB,QAQEP,KAAKc,4DAQP,OAAOd,KAAKE,uDASEK,GACdP,KAAKI,WAAWG,IAAM,EACtBP,KAAKC,WAAWM,GAAIP,KAAKe,iBACzBf,KAAKG,WAAWI,IAAM,4CAQNK,GAChB,IAAK,IAAIL,KAAMP,KAAKC,WAClBD,KAAKI,WAAWG,IAAM,EACtBP,KAAKG,WAAWI,IAAM,EAExBP,KAAKe,gBAAkBH,EACvBZ,KAAKE,gBAAiB,oDASfF,KAAKe,gBACZf,KAAKE,gBAAiB,WClNX,IAAAc,EAAA,CAACC,mBAnBhB,SAA4BC,GAC1B,IAAIC,EAAc,IAAItB,EAetB,OAdUsB,EAAYC,SAAS,SAACR,GACV,eAAjBA,EAAQS,KACTH,EAAU,CAAEI,KAAMV,EAAQW,OAGH,oBAAjBX,EAAQS,KACdH,EAAU,CAAEM,UAAWZ,EAAQW,OAGR,mBAAjBX,EAAQS,MACdH,EAAU,CAAEO,SAAUb,EAAQW,SAI3BJ,YC4BMO,MA5Cf,SAAiBC,EAAW9B,GAAY,IAAA+B,EAAA5B,KAClC6B,EAAW,CACbC,OAAQ,MAmBV9B,KAAK+B,QAAU,CACbC,WAAY,SAACV,GACXzB,EAAWoC,SAAS,CAACZ,KAAM,aAAcE,KAAMD,KAEjDY,gBAAiB,SAACX,GAChB1B,EAAWoC,SAAS,CAACZ,KAAM,kBAAmBE,KAAMA,KAEtDY,eAAgB,SAACZ,GACf1B,EAAWoC,SAAS,CAACZ,KAAM,iBAAkBE,KAAMA,KAErDa,IAAK,SAACb,GAASc,QAAQD,IAAIb,IAC3Be,OAAQ,WACNX,EAAUW,WAIdtC,KAAKuC,MAAQ,SAACC,GACZZ,EAAKG,QAAQC,WAAW,MACxBJ,EAAKG,QAAQG,gBAAgBO,GAlCb,SAAdC,IACF,IACEf,EAAUgB,qBAAqB,SAAU,SAACC,EAAKd,GAC7CD,EAASC,OAASA,EAClBA,EAAOe,KAAK,iBAAkB,KAAM,SAACD,EAAKE,GACxClB,EAAKG,QAAQI,eAAeW,GAC5BT,QAAQD,IAAIW,KAAKC,UAAUF,QAIjC,MAAOG,GACLZ,QAAQD,IAAIa,GACZC,WAAWR,EAAa,OAuB1BA,KCrCJS,OAAOC,UAAUC,WAAa,SAASC,EAAQC,GAE3C,OADavD,KACCwD,MAAMF,GAAQG,KAAKF,IAIrC,IAAIG,EAAM,CACRC,MAAQ,aAIRC,OAAS,WAEP,OAAO,IAAIC,WAAW,IAAIC,YAAY,SAASF,OAAzBG,UAAArD,QAAA,OAAAsD,EAAAD,UAAA,MAGxBE,OAAS,WACP,OAAO,IAAIC,YAAY,SAASD,OAAzBF,UAAArD,QAAA,OAAAsD,EAAAD,UAAA,KAGTI,OAAS,WAAY,IACnB,IAAIC,EAAM,EADSC,EAAAN,UAAArD,OAAR4D,EAAQ,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAARF,EAAQE,GAAAT,UAAAS,GAEnB,IAAI,IAAIC,KAAKH,EAAK,GAChBF,GAAOE,EAAK,GAAGG,GAAG/D,OAEpB,IAAIgE,EAAS,IAAIb,WAAWO,GAE5B,IAAI,IAAIK,KADRL,EAAM,EACOE,EAAK,GAChBI,EAAOC,IAAIL,EAAK,GAAGG,GAAIL,GACvBA,GAAOE,EAAK,GAAGG,GAAG/D,OAEpB,OAAOgE,GAGTE,SAAW,WACT,OAAOb,UAAArD,QAAA,OAAAsD,EAAAD,UAAA,cAAmBF,aAu/DfgB,MAn/Df,SAAaC,EAAUC,EAAQC,GAC7B,IAAMC,EAAY,SAACC,EAAOC,EAAQC,GAChC/C,QAAQD,IAAI8C,EAAOC,EAAQC,GAC3B,IAAIC,EAAI,IAAIC,KACZD,EAAEE,QAAQF,EAAEG,UAAsB,GAATJ,EAAc,GAAK,GAAK,KACjD,IAAIK,EAAU,WAAWJ,EAAEK,cAC3BC,SAASC,OAASV,EAAQ,IAAMC,EAAS,IAAMM,EAAU,WAErDI,EAAY,SAACX,GAGf,IAFA,IAAIY,EAAOZ,EAAQ,IACfa,EAAKJ,SAASC,OAAOpC,MAAM,KACvBiB,EAAI,EAAGA,EAAIsB,EAAGrF,OAAQ+D,IAAK,CAEjC,IADA,IAAIuB,EAAID,EAAGtB,GACY,MAAhBuB,EAAEC,OAAO,IACdD,EAAIA,EAAEE,UAAU,GAElB,GAAwB,IAApBF,EAAEG,QAAQL,GACZ,OAAOE,EAAEE,UAAUJ,EAAKpF,OAAQsF,EAAEtF,QAGtC,MAAO,IAEL0F,EAAc,SAACN,GACnBb,EAAUa,EAAK,IAAI,IAGfO,EAAW,CACfC,SAAS,EACTC,OAAO,EACPC,KAAM,KACNC,QAAQ,EACRC,eAAgB,IAChBC,WAAY,kBACZ7B,SAAU,UACVE,WAAY,OAGR4B,EAAY,CAChBC,QAAW,QACXC,YAAe,QACfC,UAAa,mCACbC,2BAA8B,CAC5BC,IAAO,MACPC,UAAa,YACbC,gBAAmB,kBACnBC,MAAS,QACTC,SAAU,MACVC,GAAM,YACNC,IAAO,kBACPC,MAAS,UAITC,EAAQ,CACVC,iBAAkB,SAACC,GAGZ,IAFA,IACIC,EADQC,OAAOC,SAASxE,OAAO4C,UAAU,GAC5B1C,MAAM,KACdiB,EAAE,EAAEA,EAAEmD,EAAKlH,OAAO+D,IAAK,CACxB,IAAIsD,EAAOH,EAAKnD,GAAGjB,MAAM,KACzB,GAAGuE,EAAK,IAAMJ,EAAU,OAAOI,EAAK,GAE5C,OAAO,GAEdC,oBAAqB,SAACC,GAIpB,IAHA,IAAIC,EAAML,OAAOM,KAAKF,GAClBG,EAAYF,EAAIxH,OAChB2H,EAAQ,IAAIxE,WAAW,IAAIyE,YAAYF,IACnC3D,EAAI,EAAGA,EAAI2D,EAAW3D,IAC5B4D,EAAM5D,GAAKyD,EAAIK,WAAW9D,GAE5B,OAAO4D,GAETG,mBAAoB,SAACC,GAGnB,IAFA,IAAIC,EAAQD,EAAIjF,MAAM,MAClBmF,EAAU,GACLlE,EAAI,EAAGA,EAAIiE,EAAMhI,OAAQ+D,IAC5BiE,EAAMjE,GAAGmE,OAAOlI,OAAS,GAC3BgI,EAAMjE,GAAG0B,QAAQ,mCAAqC,GACtDuC,EAAMjE,GAAG0B,QAAQ,kCAAoC,GACrDuC,EAAMjE,GAAG0B,QAAQ,8BAAgC,GACjDuC,EAAMjE,GAAG0B,QAAQ,4BAA8B,GAC/CuC,EAAMjE,GAAG0B,QAAQ,+BAAiC,GAClDuC,EAAMjE,GAAG0B,QAAQ,6BAA+B,GAChDuC,EAAMjE,GAAG0B,QAAQ,iCAAmC,GACpDuC,EAAMjE,GAAG0B,QAAQ,gCAAkC,IACnDwC,GAAWD,EAAMjE,GAAGmE,QAGxB,OAAOnB,EAAMO,oBAAoBW,IAEnCE,oBAAqB,SAACC,GAIpB,IAHA,IAAIC,EAAS,GACTC,EAAQ,IAAInF,WAAWiF,GACvB1E,EAAM4E,EAAMC,WACPxE,EAAI,EAAGA,EAAIL,EAAKK,IACvBsE,GAAU5F,OAAO+F,aAAcF,EAAOvE,IAExC,OAAOoD,OAAOsB,KAAMJ,IAEtBK,UAAW,SAACvC,EAASE,GACnB1E,QAAQD,IAAI,4CACZC,QAAQD,IAAI,yCACZC,QAAQD,IAAI,yCACZC,QAAQD,IAAI,8DACZC,QAAQD,IAAI,IACZC,QAAQD,IAAI,IACZC,QAAQD,IAAI,QAAQyE,EAAQ,KAAKE,GACjC1E,QAAQD,IAAI,mDACZC,QAAQD,IAAI,KAEdiH,OAAQ,SAACC,EAAKC,GACU,iBAAZA,IACRA,EAAYxG,KAAKC,UAAUuG,EAAW,KAAM,IAG9CD,EAAMA,EAAIpD,UAAU,EADP,IAEb,IAAI,IAAIzB,EAAE,EAAGA,EAFA,GAEW6E,EAAI5I,OAAQ+D,IAC/BA,EAAE,GAAK,EACR6E,GAAY,IAGZA,EAAM,IAAMA,EAGhBjH,QAAQD,IAAI,IAAIkH,EAAI,KAAKC,EAAUlG,WAAW,KAAM,MAAMiG,EAAI,QAEhEE,iBAAkB,WAChB,MAAO,IAAMC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,IAEpDC,aAAc,WACZ,IAAIC,EAAK,WACP,OAAOL,KAAKM,MAA4B,OAArB,EAAIN,KAAKC,WAAqBC,SAAS,IAAIzD,UAAU,IAE1E,OAAO4D,IAAOA,IAAO,IAAMA,IAAO,IAAMA,IAAO,IAAKA,IAAO,IAAMA,IAAOA,IACvEA,KAEHE,aAAc,SAACC,EAAQC,GACrB,IAAK,IAAIC,KAAQF,EACf,GAAIA,EAAOG,eAAeD,IACpBF,EAAOE,KAAUD,EACnB,OAAOC,IASbE,EAAc,CAChBnD,UAAW,CACToD,OAAQ,SAAUC,GAAmB,IAE/BC,EAF+B5I,EAAA5B,KAC/ByK,EAAM,KAGVzK,KAAK0K,SAAW,SAACrF,GACfmF,EAASnF,GAGXrF,KAAK2K,eAAiB,WACpBF,EAAIG,SAGN5K,KAAK6K,OAAS,SAACC,EAAavJ,GAAUkG,EAAM4B,OAAO,QAAS,2BAE5DrJ,KAAK+K,QAAU,WAAOtD,EAAM4B,OAAO,QAAS,4BAE5CrJ,KAAKgL,KAAO,SAACF,EAAavJ,GACxBkJ,EAAIO,KAAKzJ,IAGXvB,KAAKiL,QAAU,SAACC,EAAIC,EAAM7K,GACxB,IAAIwK,GACJL,EAAM,IAAIvD,UAAU,QAAQgE,EAAG,IAAIC,IAC/BC,WAAa,cACjBN,EAAc,IAAIP,EAAkB,KAAM,SAAU,YAAaW,EAAIC,EAAM,YAAavJ,GACxF6I,EAAIY,OAAS,WACX/K,GAAS,EAAOwK,IAGlBL,EAAIa,UAAY,SAACC,GACf3J,EAAKiJ,OAAOC,EAAa,IAAIjH,WAAW0H,EAAMhK,QAGhDkJ,EAAIe,QAAU,SAACC,GACVjB,IACD/C,EAAM4B,OAAO,SAAU,0CACvB5B,EAAM4B,OAAO,SAAUoC,IAEzBhB,EAAIG,QACJhJ,EAAKmJ,QAAQD,IAGfL,EAAIiB,QAAU,SAACD,GACX7J,EAAKmJ,QAAQD,OAMvB3D,gBAAiB,CACfmD,OAAQ,SAAUC,GAAmB,IAE/BC,EAF+BmB,EAAA3L,KAC/ByK,EAAM,KAGVzK,KAAK0K,SAAW,SAACrF,GACfmF,EAASnF,GAGXrF,KAAK2K,eAAiB,WACpBF,EAAIG,SAGN5K,KAAK6K,OAAS,SAACC,EAAavJ,GAAUkG,EAAM4B,OAAO,QAAS,2BAE5DrJ,KAAK+K,QAAU,WAAOtD,EAAM4B,OAAO,QAAS,4BAE5CrJ,KAAKgL,KAAO,SAACF,EAAavJ,GACxBkJ,EAAIO,KAAKzJ,IAGXvB,KAAKiL,QAAU,SAACC,EAAIC,EAAM7K,GACxB,IAAIwK,GACJL,EAAM,IAAIvD,UAAU,SAASgE,EAAG,IAAIC,IAChCC,WAAa,cACjBN,EAAc,IAAIP,EAAkB,KAAM,SAAU,kBAAmBW,EAAIC,EAAM,YAAaQ,GAC9FlB,EAAIY,OAAS,WACX/K,GAAS,EAAOwK,IAGlBL,EAAIa,UAAY,SAACC,GACfI,EAAKd,OAAOC,EAAa,IAAIjH,WAAW0H,EAAMhK,QAGhDkJ,EAAIe,QAAU,SAACC,GACVjB,IACD/C,EAAM4B,OAAO,SAAU,0CACvB5B,EAAM4B,OAAO,SAAUoC,IAEzBhB,EAAIG,QACJe,EAAKZ,QAAQD,IAGfL,EAAIiB,QAAU,SAACD,GACXE,EAAKZ,QAAQD,QAOzB,SAASc,EAAWC,GAAS,IAAAC,EAAA9L,KACxB6L,EAAQE,wBACTC,8CAAYC,6BAA+B,KAE7C,IAKIC,EACAC,EAIAC,EATAC,EAAW,GACXC,EAAW,GACXC,GAAqB,EAIrBC,EAA0B9I,EAAIE,OAAO,MACrC6I,EAAkB,IAClBjC,GAAS,EAIb,SAASD,EAAkBmC,EAAUC,EAAMC,EAAYC,EAAQC,EAAUC,EAAUC,GAAM,IAAAC,EAAAjN,KACnFkN,EAAYR,EACZS,EAAOR,EACPS,EAAcR,EACdS,EAAU,GACVC,EAAQ7F,EAAMoC,eACd0D,EAAUV,EACVW,EAAYV,EACZW,EAAYV,EACZW,EAAQV,EAEA,WAATL,IACDL,EAASM,EAAWC,EAAOC,GAAY9M,MAGzCA,KAAK2K,eAAiB,WACR,WAATgC,UACML,EAASM,EAAWC,EAAOC,GAGpCY,EAAM/C,eAAe2C,IAGvBtN,KAAK2N,YAAc,SAACrN,GAAcA,GAAS,EAAO4M,IAClDlN,KAAK4N,UAAY,SAACtN,GAAcA,GAAS,EAAOiN,IAChDvN,KAAK6N,YAAc,SAACvN,GAAcA,GAAS,EAAOkN,IAClDxN,KAAK8N,YAAc,SAACxN,GAAcA,GAAS,EAAOmN,IAClDzN,KAAK+N,cAAgB,SAACzN,GAAcA,GAAS,EAAO8M,IACpDpN,KAAKgO,kBAAoB,SAAC1N,GAAcA,GAAS,EAAO6M,IACxDnN,KAAKiO,UAAY,SAACC,EAAKhE,GAAWmD,EAAQa,GAAOhE,GACjDlK,KAAKmO,UAAY,SAACD,EAAK5N,GAAcA,GAAS,EAAO+M,EAAQa,KAC7DlO,KAAKoO,QAAU,SAAC9N,GAAcA,GAAS,EAAOoN,IAC9C1N,KAAKqO,QAAU,SAAC/N,GAAcA,GAAS,EAAOgN,IAE9CtN,KAAKsO,eAAiB,WAAO,OAAOpB,GACpClN,KAAKuO,aAAe,WAAO,OAAOhB,GAClCvN,KAAKwO,eAAiB,WAAO,OAAOhB,GACpCxN,KAAKyO,eAAiB,WAAO,OAAOhB,GACpCzN,KAAK0O,iBAAmB,WAAO,OAAOtB,GACtCpN,KAAK2O,qBAAuB,WAAO,OAAOxB,GAC1CnN,KAAK4O,aAAe,SAACV,GAAS,OAAOb,EAAQa,IAC7ClO,KAAK6O,WAAa,WAAO,OAAOnB,GAChC1N,KAAK8O,WAAa,WAAO,OAAOxB,GAEhCtN,KAAK+O,QAAS,WAEZ9B,EAAK+B,qBAAsB,SACpB1C,EAASgB,IAQpBtN,KAAKiP,UAAY,SAACC,EAAahE,EAAIC,GAEjC,GAAmB,UAAhB+D,GAAuC,SAAdA,EAC1B,IAA0B,IAAvB3C,EAA8B,CAC/B,IACI4C,EAAS,IAAI9E,EAAYjD,MAAMgI,OADnB,QACqC7E,GACrD8B,EAAQ,MAAc8C,EACtBA,EAAO5M,MAAM,UAAW,aACxB4M,EAAOtE,OAASiB,EAAKjB,OACrBsE,EAAOpE,QAAUe,EAAKf,QACtBwB,GAAqB,OAGrB9E,EAAM4B,OAAO,QAAS,yCAGrB,GAAG+C,EAAoB8C,GAAc,CACxC,IAAIhC,EAAYzF,EAAM+B,mBAClB2F,EAAS,IAAI9E,EAAY+B,EAAoB8C,IAAcE,OAAOlC,EAAW3C,EAAmB2B,EAAcC,GAClHE,EAASa,GAAaiC,EACtBA,EAAO5M,MAAM2I,EAAIC,GACjBgE,EAAOtE,OAASiB,EAAKjB,OACrBsE,EAAOpE,QAAUe,EAAKf,aAGtBtD,EAAM4B,OAAO,QAAS,cAAc6F,EAAY,8BAIjB,GAA9BpP,OAAOuP,KAAKhD,GAAU3L,QACvB4O,YAAY,WACV,IAAI,IAAI7K,KAAK4H,EACX,IACEA,EAAS5H,GAAG8K,UAAU/C,GAExB,MAAMvJ,GACDuH,GACD/C,EAAM4B,OAAO,SAAU,UAAU5E,EAAE,2CAIxCgI,IAIPzM,KAAKwP,aAAe,SAACN,EAAaO,EAAUtE,EAAM7K,GAEhD,IAAIoP,EAAiB,SAAC5E,EAAavJ,GAC9BA,EAAKb,QAAQ8L,EAAwB9L,QAAQa,EAAK,IAAIiL,EAAwB,IAAIjL,EAAK,IAAIiL,EAAwB,IACpHV,EAAKjB,OAAOC,EAAavJ,IAMzBoO,EAAerD,EAAS4C,EAAYO,EAAStE,GAEjD,GAAGwE,EACDrP,GAAS,EAAOqP,QAEb,GAAmB,UAAhBT,GAAuC,SAAdA,EAC/B,IAA0B,IAAvB3C,EACD9E,EAAM4B,OAAO,QAAS,iCAEnB,CACH,IAAIuG,EAAO,IAAIvF,EAAYjD,MAAMkD,OAAOC,GACxCqF,EAAKlF,SAASF,GACdoF,EAAK/E,OAAS6E,EACdE,EAAK7E,QAAUe,EAAKf,QACpB6E,EAAK3E,QAAQ,UAAW,YAAa3K,QAIpC,GAAG8L,EAAoB8C,GAAc,CACxC,IAAIW,EAAO,IAAIxF,EAAY+B,EAAoB8C,IAAc5E,OAAOC,GACpEsF,EAAKnF,SAASF,GACdqF,EAAKhF,OAAS6E,EACdG,EAAK9E,QAAUe,EAAKf,QACpB8E,EAAK5E,QAAQwE,EAAUtE,EAAM7K,QAI7BmH,EAAM4B,OAAO,QAAS,cAAc6F,EAAY,+BAIpDlP,KAAK8P,mBAAqB,SAACC,GACzB1F,EAAY0F,EAAYC,eAAiBD,GAG3C/P,KAAKgL,KAAO,SAACF,EAAavJ,GACxB,IACEuJ,EAAYsD,QAAQ,SAACxL,EAAKoK,GACxBA,EAAKhC,KAAKF,EAAavJ,KAG3B,MAAO0B,GACFuH,IACD/C,EAAM4B,OAAO,SAAU,qCACvBhH,QAAQD,IAAIa,MAKlBjD,KAAKuP,UAAY,SAAChO,GAChB,IACE8K,EAAS4D,QAAQ,SAAC/B,EAAKiB,GACrBA,EAAOI,UAAUhO,KAGrB,MAAO0B,GACFuH,IACD/C,EAAM4B,OAAO,SAAU,0CACvBhH,QAAQD,IAAIa,MAKlBjD,KAAK6K,OAAS,SAACqF,EAAc3O,GAC3BkG,EAAM4B,OAAO,QAAS,2CAGxBrJ,KAAK+K,QAAU,SAACD,GACdrD,EAAM4B,OAAO,QAAS,4CAGxBrJ,KAAKmQ,WAAa,SAAC7P,GACjBA,GAAS,EAAO+L,IAGlBrM,KAAKoQ,WAAa,SAAC9P,GACjBA,GAAS,EAAOgM,IAGlBtM,KAAKqQ,WAAa,SAACH,KAInBlQ,KAAK0K,SAAW,SAAC4F,GACf9F,EAAS8F,GAGXtQ,KAAKuQ,cAAgB,SAACC,GACpBrE,EAAWqE,GAGbxQ,KAAKyQ,oBAAsB,SAACC,GAC1BxE,EAAewE,GAGjB1Q,KAAK2Q,qBAAuB,SAACC,GAC3BnE,EAAkBmE,GAGpB5Q,KAAK6Q,8BAAgC,SAACC,GACpC1E,EAAsB0E,GAGxB9Q,KAAK4K,MAAQ,WAOX,IAAI,IAAInG,KANRqH,EAAKf,QAAU,SAACD,GACdrD,EAAM4B,OAAO,QAAS,4CAExByC,EAAKjB,OAAS,SAACqF,EAAc3O,GAC3BkG,EAAM4B,OAAO,QAAS,2CAEXiD,EACXA,EAAS7H,GAAGkG,iBAEd,IAAI,IAAIlG,KAAK4H,EACXA,EAAS5H,GAAGmG,SAKlB,IAAImG,EAAY,CACd,SAAkBC,EAAaC,GAE7BjR,KAAKkR,SAAW,KAEhBlR,KAAKmR,UAAY,CACfC,GAAI,SACJC,GAAI,UAGeL,EAAYM,eACpBN,EAAYO,OACbP,EAAYQ,UAFxB,IAGIC,EAAuBT,EAAYS,qBAQnCC,EAAW,CAEbC,GAAM,SAAC7G,EAAavJ,EAAMqQ,GACxBH,EAAqBI,eAAe/G,EAAavJ,EAAMqQ,IAIzDE,GAAM,SAAChH,EAAavJ,EAAMqQ,GACxBH,EAAqBM,qBAAqBjH,EAAavJ,EAAMqQ,IAI/DI,GAAM,SAAClH,EAAavJ,EAAMqQ,GACxBH,EAAqBQ,YAAYnH,EAAavJ,EAAMqQ,IAItDM,GAAM,SAACpH,EAAavJ,EAAMqQ,GACxBH,EAAqBU,kBAAkBrH,EAAavJ,EAAMqQ,IAI5DQ,GAAM,SAACtH,EAAavJ,EAAMqQ,GACxBH,EAAqBY,OAAOvH,EAAavJ,EAAMqQ,IAGjDU,GAAM,cAMRtS,KAAKuS,eAAiB,SAACzH,EAAa0H,EAAMZ,GACxC,IAAIrQ,EAAOwB,KAAK0P,MAAM/O,EAAIO,OAAOuO,IAIjCd,EAASnQ,EAAKmR,GAAG5H,EAAavJ,EAHV,SAACuJ,EAAavJ,GAChCqQ,EAAa9G,EAAapH,EAAIE,OAAOb,KAAKC,UAAUzB,SAM1D,SAAkByP,EAAaC,GAC7BjR,KAAKkR,SAAW,KAEhBlR,KAAKmR,UAAY,CACfC,GAAI,SACJC,GAAI,UAGN,IAAIsB,EAAW3B,EAAY2B,SACvBlL,EAAQuJ,EAAYQ,UAEpBoB,EAAyB,GAEzBC,EAAW,SAACtR,GACd,GAAGmC,EAAIkB,SAASrD,EAAK8D,EAAEA,GAAI,CACzB,IAAIyN,EAAYpP,EAAIS,OAAO,CAAC5C,EAAK8D,EAAEA,IACnC9D,EAAK8D,EAAEA,EAAI,KACX,IAAI0N,EAAarP,EAAIE,OAAOb,KAAKC,UAAUzB,IAC3C,OAAOmC,EAAIS,OAAO,CAACT,EAAIE,QAAQ,mBAAmBmP,EAAWrS,QAAQsS,OAAO,KAAMD,EAAYrP,EAAIE,QAAQ,mBAAmBkP,EAAUpS,QAAQsS,OAAO,KAAMF,IAG5J,IAAIN,EAAO9O,EAAIE,OAAOb,KAAKC,UAAUzB,IACrC,OAAOmC,EAAIS,OAAO,CAACT,EAAIE,QAAQ,mBAAmB4O,EAAK9R,QAAQsS,OAAO,KAAMR,KAqBhFG,EAASM,GAAG,yBAA0B,SAAClO,EAAQC,EAAYkO,EAAOC,EAAMC,EAAStO,EAAUuO,EAAgB/S,GACzG,IACIgT,EAAQ,CACVZ,EAAK,KACLrN,EAAK,CACHkO,EAAG9L,EAAMoC,eACT2J,EAAGN,EACHR,EAAGS,EACHM,EAAGL,EACHM,GAAI5O,EACJ6O,EAAGN,IAGPrC,EAAYpF,WAAW4D,aAAazK,EAAQD,EAAUE,EAAY,SAACpC,EAAKkI,GACtE8H,EAAuBU,EAAMjO,EAAEkO,GAAK,SAACzI,EAAavJ,GAChDjB,GAAS,EAAOwK,EAAavJ,EAAK8D,EAAEZ,IAEtCwM,EAAYnG,EAAa,KAAM+H,EAASS,QAK5CX,EAASM,GAAG,8BAA+B,SAAC/C,EAAc0D,EAAU9N,EAAMvE,EAAMuB,EAAM+Q,GAWlF5C,EAAYf,EAAc,KAAM2C,EAVpB,CACVH,EAAK,KACLrN,EAAK,CACHZ,EAAKmP,EACLE,EAAKhO,EACLyN,EAAKM,EACLxO,EAAK9D,EACLmR,EAAK5P,QAOb6P,EAASM,GAAG,eAAgB,SAAC/C,EAAc0D,EAAUvO,GAQjD4L,EAAYf,EAAc,KAAM2C,EAPpB,CACVH,EAAK,KACLrN,EAAK,CACHZ,EAAKmP,EACLvO,EAAKA,QAObsN,EAASM,GAAG,0BAA2B,SAAC/C,EAAc0D,EAAU9N,EAAMvE,EAAMsS,GAUxE5C,EAAYf,EAAc,KAAM2C,EATpB,CACVH,EAAK,KACLrN,EAAK,CACHZ,EAAKmP,EACLE,EAAKhO,EACLyN,EAAKM,EACLxO,EAAK9D,QAOboR,EAASM,GAAG,gBAAiB,SAAC/C,EAAc0D,GAOxC3C,EAAYf,EAAc,KAAM2C,EANpB,CACVH,EAAK,KACLrN,EAAK,CACHZ,EAAKmP,QAQb5T,KAAK+T,gBAAkB,SAACjJ,EAAa0H,GACnC,IAAIjR,EA7FY,SAACiR,GACjB,IAIMwB,EAJFtT,EAASuT,SAASvQ,EAAIO,OAAOuO,EAAKQ,MAAM,EAAG,MAC3CkB,EAAYnR,KAAK0P,MAAM/O,EAAIO,OAAOuO,EAAKQ,MAAM,GAAI,GAAGtS,KAExD,OADA8R,EAAOA,EAAKQ,MAAM,GAAGtS,IACbA,QAENA,EAASuT,SAASvQ,EAAIO,OAAOuO,EAAKQ,MAAM,EAAG,MAC3CgB,EAAYxB,EAAKQ,MAAM,GAAI,GAAGtS,GAC9BwT,EAAU7O,EAAEA,EAAI2O,EACTE,GAGAA,EAiFEC,CAAY3B,IACT,CAEZ4B,GAAI,SAACtJ,EAAavJ,GACA,OAAbA,EAAK8D,EAAEoO,EACRd,EAAS0B,+BAA+B9S,EAAK8D,EAAEZ,GAI/CkO,EAAS2B,YAAY/S,EAAK8D,EAAEZ,IAKhC8P,GAAI,SAACzJ,EAAavJ,KAIlBiT,GAAI,SAAC1J,EAAavJ,GACA,OAAbA,EAAK8D,EAAEoO,EACRd,EAAS8B,cAAclT,EAAK8D,EAAEZ,GAAG,EAAOlD,EAAK8D,EAAEkO,EAAGhS,EAAK8D,EAAEA,EAAG9D,EAAK8D,EAAEqN,GAGnEC,EAAS8B,cAAclT,EAAK8D,EAAEZ,GAAG,EAAMlD,EAAK8D,EAAEkO,EAAGhS,EAAK8D,EAAEA,EAAG9D,EAAK8D,EAAEqN,IAItEgC,GAAI,SAAC5J,EAAavJ,GACA,OAAbA,EAAK8D,EAAEoO,EACRd,EAASgC,aAAapT,EAAK8D,EAAEZ,GAAG,EAAOlD,EAAK8D,EAAEkO,EAAGhS,EAAK8D,EAAEA,GAGxDsN,EAASgC,aAAapT,EAAK8D,EAAEZ,GAAG,EAAMlD,EAAK8D,EAAEkO,EAAGhS,EAAK8D,EAAEA,IAI3DuP,GAAI,SAAC9J,EAAavJ,GAEhB,GAAe,MAAZA,EAAK8D,EAAEZ,EAAW,CAEnBmO,EAAuBrR,EAAK8D,EAAEkO,GAAGzI,EAAavJ,GAC9C,IAAI+R,EAAQ,CACVZ,EAAK,KACLrN,EAAK,CACHZ,EAAKlD,EAAK8D,EAAEZ,IAIhBwM,EAAYnG,EAAa,KAAM+H,EAASS,SAGxCV,EAAuBrR,EAAK8D,EAAEkO,GAAGzI,EAAavJ,UACtCqR,EAAuBrR,EAAK8D,EAAEkO,MAMpChS,EAAKmR,GAAG5H,EAAavJ,KAIjC,SAAkByP,EAAaC,GAC7BjR,KAAKkR,SAAW,KAEhBlR,KAAKmR,UAAY,CACfC,GAAI,SACJC,GAAI,UAGNrR,KAAK+T,gBAAkB,SAACjJ,EAAa0H,GACnC,IAAIjR,EAAOwB,KAAK0P,MAAM/O,EAAIO,OAAOuO,IACnB,OAAXjR,EAAKkS,EACNzC,EAAYM,eAAeuD,QAAQ/J,GAAa,EAAOvJ,EAAKuT,EAAGvT,EAAKgS,GAGpEvC,EAAYM,eAAeuD,QAAQ/J,GAAa,EAAMvJ,EAAKuT,EAAGvT,EAAKgS,KAKzE,SAAkBvC,EAAaC,GAC7BjR,KAAKkR,SAAW,KAChBlR,KAAKmR,UAAY,CACfC,GAAI,SACJC,GAAI,UAGN,IAAIsB,EAAW3B,EAAY2B,SA+B3B3S,KAAKuS,eAAiB,SAACzH,EAAa0H,EAAMZ,GACxC,IAAIrQ,EAjBY,SAACiR,GACjB,IAIMwB,EAJFtT,EAASuT,SAASvQ,EAAIO,OAAOuO,EAAKQ,MAAM,EAAG,MAC3CkB,EAAYnR,KAAK0P,MAAM/O,EAAIO,OAAOuO,EAAKQ,MAAM,GAAI,GAAGtS,KAExD,OADA8R,EAAOA,EAAKQ,MAAM,GAAGtS,IACbA,QAENA,EAASuT,SAASvQ,EAAIO,OAAOuO,EAAKQ,MAAM,EAAG,MAC3CgB,EAAYxB,EAAKQ,MAAM,GAAI,GAAGtS,GAC9BwT,EAAU7O,EAAEA,EAAI2O,EACTE,GAGAA,EAKEC,CAAY3B,IAET,CAEZuC,GAAI,WACFpC,EAASqC,WAAWzT,EAAK8D,EAAEZ,EAAGlD,EAAK8D,EAAEA,GACrC,IAAIiO,EAAQ,CACVZ,EAAK,KACLrN,EAAK,CAEHZ,EAAKlD,EAAK8D,EAAEZ,EACZgP,EAAK,OAGT7B,EAAa9G,EAAapH,EAAIE,OAAOb,KAAKC,UAAUsQ,MAGtD2B,GAAI,WACFtC,EAASuC,gBAAgB3T,EAAK8D,EAAEZ,EAAGlD,EAAK8D,EAAEyO,EAAGvS,EAAK8D,EAAEA,EAAG9D,EAAK8D,EAAEqN,GAC9D,IAAIY,EAAQ,CACVZ,EAAK,KACLrN,EAAK,CAEHZ,EAAKlD,EAAK8D,EAAEZ,EACZgP,EAAK,OAGT7B,EAAa9G,EAAapH,EAAIE,OAAOb,KAAKC,UAAUsQ,MAGtD6B,GAAI,WACFxC,EAASyC,YAAY7T,EAAK8D,EAAEZ,EAAGlD,EAAK8D,EAAEyO,EAAGvS,EAAK8D,EAAEA,GAChD,IAAIiO,EAAQ,CACVZ,EAAK,KACLrN,EAAK,CAEHZ,EAAKlD,EAAK8D,EAAEZ,EACZgP,EAAK,OAGT7B,EAAa9G,EAAapH,EAAIE,OAAOb,KAAKC,UAAUsQ,MAGtD+B,GAAI,WACF1C,EAAS2B,YAAY/S,EAAK8D,EAAEZ,MAIxBlD,EAAKmR,GAAG5H,EAAavJ,EAAK8D,EAAGuM,MAK3C,SAAS0D,IAAS,IACZC,EADYC,EAAAxV,KAGZyV,EAAiB,GACjBC,EAAgB,GAGhBlL,GAAS,EAETmL,EAAoB,SAACC,GACvB,IAAI,IAAInR,KAAKgR,EACXA,EAAehR,IAAG,EAAOmR,IAqBzBC,EAAY,SAAC/K,EAAa/F,EAAQ+Q,EAAStD,GAC7C,IAAIuD,EAAYrS,EAAIS,OAAO,CAACT,EAAIE,OAAOmB,EAAO+Q,EAAS,QAAStD,IAE7D1H,GACDyK,EAAaS,KAAKC,oBAAoBnL,EAAa,SAACoL,IACnC,IAAZA,EACDX,EAAaS,KAAKG,QAAQrL,EAAaiL,EAAW,SAACnT,EAAKwT,GAClDxT,EAGI4H,IACNnI,QAAQD,IAAIQ,GACZ6E,EAAM4B,OAAO,SAAUzG,EAAIyT,QAJ3Bd,EAAa3J,WAAWZ,KAAKF,EAAasL,KAS9Cb,EAAa3J,WAAWZ,KAAKF,EAAaiL,MAO9CO,EAAU,GAIdtW,KAAKuW,eAAiB,SAACjW,GACrBmV,EAAee,KAAKlW,IAGtBN,KAAKyW,cAAgB,SAACnW,GACpBoV,EAAcc,KAAKlW,IAIrBN,KAAKiR,YAAc,SAACnG,EAAa/F,EAAQyN,GACvC8D,EAAQvR,GAAQkM,YAAYnG,EAAa0H,IAI3CxS,KAAK0W,WAAa,SAAC1F,GAEjBxG,GADA+K,EAAevE,GACO2F,SAASpQ,MAG/BgP,EAAa3J,WAAWf,OAAS,SAACC,EAAavJ,IAhE1B,SAACA,GACtB,IAAI,IAAIkD,KAAKiR,EACXA,EAAcjR,IAAG,EAAOlD,GA+DxBqV,CAAiBrV,GACjB,IACE,IAAoC,IAAjCgU,EAAaoB,SAASlQ,QAAqD,SAAlCqE,EAAY4D,oBAAmE,SAAlC5D,EAAY4D,mBAEnG6G,EAAaS,KAAKa,QAAQ/L,EAAavJ,EAAM,SAACqB,EAAKkU,GAC9ClU,GAAK2S,EAAaoB,SAASpQ,OAC5BlE,QAAQD,IAAIQ,GAEd,IAAImC,EAASrB,EAAIO,OAAO6S,EAAU9D,MAAM,EAAG,IACvC8C,EAAUpS,EAAIO,OAAO6S,EAAU9D,MAAM,EAAG,IACxCR,EAAOsE,EAAU9D,MAAM,GAC3B2C,EAAkB,CAAC5Q,OAAQA,EAAQ+Q,QAASA,EAASvU,KAAMmC,EAAIO,OAAOuO,KACtE8D,EAAQvR,GAAQwN,eAAezH,EAAagL,EAAStD,SAGpD,CACH,IAAIzN,EAASrB,EAAIO,OAAO1C,EAAKyR,MAAM,EAAG,IAClC8C,EAAUpS,EAAIO,OAAO1C,EAAKyR,MAAM,EAAG,IACnCR,EAAOjR,EAAKyR,MAAM,GAEtB2C,EAAkB,CAAC5Q,OAAQA,EAAQ+Q,QAASA,EAASvU,KAAMmC,EAAIO,OAAOuO,KACtE8D,EAAQvR,GAAQwN,eAAezH,EAAagL,EAAStD,IAGzD,MAAOuE,GACFvM,IACD/C,EAAM4B,OAAO,QAAS,sCACtBhH,QAAQD,IAAI2U,MAKlBxB,EAAa3J,WAAWb,QAAU,SAACD,GACjC,IAC4C,WAAvCA,EAAY6D,uBACb4G,EAAa7T,QAAQsV,oBAAoBlM,EAAa,SAAClI,GACrDkI,EAAYiE,YAIdwG,EAAa5C,SAASqE,oBAAoBlM,EAAa,SAAClI,GACtDkI,EAAYiE,YAKlB,MAAOgI,GACFvM,IACD/C,EAAM4B,OAAO,SAAU,sCACvBhH,QAAQD,IAAI2U,MAMlBhG,EAAUd,QAAQ,SAACgH,GACjB,IAAIC,EAAI,IAAID,EAAG1B,EAAcC,EAAKvE,YAAazG,GAC/C8L,EAAQY,EAAEhG,UAAY,CACpBD,YAAc,SAACnG,EAAavJ,GAC1BsU,EAAU/K,EAAaoM,EAAEhG,SAAU,KAAM3P,IAG3CgR,eAAiB,SAACzH,EAAagL,EAASvU,GACtCuJ,EAAYkD,kBAAkB,SAACpL,EAAKuU,GAC/BD,EAAE/F,UAAU2E,KAAaqB,GAAgC,SAAzBD,EAAE/F,UAAU2E,GAI9B,OAAZA,EACDoB,EAAE3E,eAAezH,EAAavJ,EAJZ,SAACuJ,EAAavJ,GAChCsU,EAAU/K,EAAcoM,EAAEhG,SAAU,KAAM3P,KAM1C2V,EAAEnD,gBAAgBjJ,EAAavJ,GAlIpB,SAAC6V,EAAUtB,EAASvU,GACxCiJ,IACD/C,EAAM4B,OAAO,SAAU,uBACvB5B,EAAM4B,OAAO,SAAU+N,GACvB3P,EAAM4B,OAAO,SAAUyM,GACvBrO,EAAM4B,OAAO,SAAU9H,IAiIf8V,CAAmBH,EAAGpB,EAASvU,SAOzCgU,EAAajE,eAAegG,qBAAuB/B,EAAa3J,WAAW4D,aAC3E+F,EAAajE,eAAeL,YAAc,SAACnG,EAAa/F,EAAQwS,GAAS/B,EAAKvE,YAAYnG,EAAa/F,EAAQrB,EAAIE,OAAOb,KAAKC,UAAUuU,MACzIhC,EAAajE,eAAekG,eAAiB3B,EAC7CN,EAAaS,KAAKwB,eAAiB3B,GAIrC7V,KAAKyX,YAAc,SAACR,GACfzM,GACD/C,EAAM4B,OAAO,SAAU,gCAEzB0H,EAAUyF,KAAKS,IAGjBjX,KAAK4K,MAAQ,WACX2K,EAAe,KACfE,EAAiB,GACjBC,EAAgB,IAMpB,IAAIgC,EAAa,CACfC,eAAgB,SAAwBC,EAAc1H,EAAc2H,EAASC,EAA0BvR,GAAO,IAUxGwR,EAVwGC,EAAAhY,KAExGiY,EAAYJ,EAAQK,KAEpBC,EAAcN,EAAQO,gBAEtBC,EAAmBR,EAAQS,oBAE3BC,EAAaV,EAAQW,MAGrBC,GAAY,EAEZC,EAAW,GAGXC,EAAW,GACXC,EAAY,GAEZC,EAAW,CACbtX,KAAM,WACDgF,GAAOkB,EAAM4B,OAAO,SAAU,8BAA8BuO,EAAa,gCAE9EhN,MAAO,WACFrE,GAAOkB,EAAM4B,OAAO,SAAU,8BAA8BuO,EAAa,kCAI5EkB,EAAY,GAIZC,EAAiB,GAKjBC,EAAO,SAAC1Y,GACM,GAAbmY,EACDnY,IAGAoY,EAASlC,KAAKlW,IAIlBN,KAAKiZ,OAAS,WAEZ,IAAI,IAAIxU,KADRgU,GAAY,EACCC,EACXA,EAASjU,MAIbzE,KAAKkZ,YAAc,SAAC3Y,GAClBwX,EAAaxX,EACb,IAAI4Y,EAAgBjJ,EAAatB,aAAa,mBAC1B,MAAjBuK,EACDjJ,EAAajC,UAAU,kBAAmB,CAAC8J,GAAY5T,OAAOgV,IAG9DjJ,EAAajC,UAAU,kBAAmB,CAAC8J,KAK/C/X,KAAK6C,KAAO,SAACiD,EAAMvE,EAAMjB,GAQvB0Y,EAPS,WACP,IAAInF,EAASpM,EAAM+B,mBACnBmP,EAAS9E,GAAU,SAACjR,EAAKwW,GACvB9Y,EAASsC,EAAKwW,IAEhBjB,EAAYjI,EAAc6H,EAAYjS,EAAMvE,EAAMsS,MAMtD7T,KAAKqZ,SAAW,SAACvT,EAAM0M,EAAM1P,EAAMxC,GAQjC0Y,EAPS,WACP,IAAInF,EAASpM,EAAM+B,mBACnBoP,EAAU/E,GAAU,SAACjR,EAAK0W,EAAYxW,GACpCxC,EAASsC,EAAK0W,EAAYxW,IAE5BuV,EAAiBnI,EAAc6H,EAAYjS,EAAM0M,EAAM1P,EAAM+Q,MAKjE7T,KAAKuZ,YAAc,SAACjZ,GAClBA,GAAS,EAAOyX,IAGlB/X,KAAKwZ,SAAW,SAACjY,GAIfyX,EAHS,WACPf,EAAU/H,EAAc6H,EAAYxW,MAKxCvB,KAAKiT,GAAK,SAAC5R,EAAMf,GACfuY,EAASxX,GAAQf,GAGnBN,KAAKyZ,QAAU,SAAClO,EAAOjL,GACrBwY,EAAUvN,GAASjL,GAGrBN,KAAK0Z,YAAc,SAACnO,EAAOjL,GACzByY,EAAexN,GAASjL,GAG1BN,KAAK2Z,UAAY,SAACpY,GAChBsX,EAAQ,MAAS,EAAOtX,IAG1BvB,KAAK4Z,eAAiB,SAACrO,EAAOiH,EAAM1P,GAC/BiW,EAAexN,IAChBwN,EAAexN,IAAO,EAAOiH,EAAM1P,IAGvC9C,KAAK6Z,cAAgB,SAACjX,EAAKiR,EAAQuF,GAC9BxW,EACD+V,EAAS9E,GAAQjR,GAGjB+V,EAAS9E,GAAQjR,EAAKwW,UAEjBT,EAAS9E,IAGlB7T,KAAK8Z,eAAiB,SAAClX,EAAKiR,EAAQyF,EAAYxW,GAC3CF,EACDgW,EAAU/E,GAAQjR,GAGlBgW,EAAU/E,GAAQjR,EAAK0W,EAAYxW,UAE9B8V,EAAU/E,IAGnB7T,KAAK+Z,WAAa,SAACxO,EAAOhK,GACrBuX,EAAUvN,IACXuN,EAAUvN,IAAO,EAAOhK,IAG5BvB,KAAKga,WAAa,WAChBnB,EAAQ,OAAU,IAGpB7Y,KAAKia,cAAe,EAEpBja,KAAK8X,yBAA2B,WAC9BrQ,EAAM4B,OAAO,QAAS,wCAGxBrJ,KAAK4K,MAAQ,WAiBXoO,EAhBS,WACHhB,EAAKiC,cACP1B,EAAWrI,EAAc6H,GAC3BC,EAAKgC,aAEL,IADA,IAAIE,EAAShK,EAAatB,aAAa,mBAC9BnK,EAAEyV,EAAOxZ,OAAO,EAAG+D,GAAG,EAAGA,IAC5ByV,EAAOzV,KAAOsT,IAChBD,EAAyBC,GACzBmC,EAAOC,OAAO1V,EAAG,IAGrByL,EAAajC,UAAU,kBAAmBiM,GACrB,IAAlBA,EAAOxZ,QACRwP,EAAavF,sBASvB,SAASgI,IAAW,IAIdyH,EAIAC,EARcC,EAAAta,KACdua,EAA+B,IAC/BC,EAAY,GACZC,EAAc,QAEdjQ,GAAS,EACTkQ,EAAc,GAMdC,EAA4B,SAAC5C,GAC/B7U,WAAW,WAENsX,EAAUzC,KACXyC,EAAUzC,GAAY/I,qBAAsB,UACvCwL,EAAUzC,IAChBwC,IAILva,KAAK2C,qBAAuB,SAACoC,EAAQD,EAAUE,EAAYoO,EAASF,EAAO5S,GACzE+Z,EAAW,CACTnC,KAAMwC,EAAW,aACjBtC,gBAAiBsC,EAAW,wBAC5BlC,MAAOkC,EAAW,eAEpBA,EAAW,uBAA2B3V,EAAQC,EAAYkO,EAAO,SAAUE,EAAStO,GAAU,EAAO,SAAClC,EAAKkI,EAAa8I,GACtH,GAAGA,EAAU,CACX,IAAIgH,EAAM,IAAIlD,EAAWC,eAAevE,EAAStI,EAAauP,EAAUM,EAA2BnQ,GACnGoQ,EAAI1B,YAAYtF,GAChB,IAAIiH,EAAO/P,EAAY8D,eACnBiM,IACFA,EAAO,IAET/P,EAAYmD,UAAU,kBAAmB4M,EAAK1W,OAAOyP,IACrD4G,EAAU5G,GAAYgH,EACtBta,GAAS,EAAOka,EAAU5G,SAG1BtT,EAAS,IAAIwa,MAAM,qDAKzB9a,KAAK+a,gCAAkC,SAAChW,EAAQD,EAAUE,EAAYoO,EAAS9S,GAC7Ega,EAAKU,2BAA2BjW,EAAQD,EAAUE,EAAYoO,EAASqH,EAAana,IAGtFN,KAAKgb,2BAA6B,SAACjW,EAAQD,EAAUE,EAAYoO,EAASF,EAAO5S,GAC/E+Z,EAAW,CACTnC,KAAMwC,EAAW,aACjBtC,gBAAiBsC,EAAW,wBAC5BpC,oBAAqBoC,EAAW,4BAChClC,MAAOkC,EAAW,eAEpBA,EAAW,uBAA2B3V,EAAQC,EAAYkO,EAAO,SAAUE,EAAStO,EAAUsV,EAAkB,SAACxX,EAAKkI,EAAa8I,GACjI,GAAGA,EAAU,CACX,IAAIgH,EAAM,IAAIlD,EAAWC,eAAevE,EAAStI,EAAauP,EAAUM,EAA2BnQ,GACnGoQ,EAAI1B,YAAYtF,GAChB,IAAIiH,EAAO/P,EAAY8D,eACnBiM,IACFA,EAAO,IAET/P,EAAYmD,UAAU,kBAAmB4M,EAAK1W,OAAOyP,IACrD4G,EAAU5G,GAAYgH,EACtBta,GAAS,EAAOka,EAAU5G,SAG1BtT,EAAS,IAAIwa,MAAM,qDAKzB9a,KAAKsU,YAAc,SAACV,GAClB4G,EAAU5G,GAAUqG,cAAe,EACnCO,EAAU5G,GAAUoG,cAGtBha,KAAKgV,WAAa,SAACpB,EAAUrS,GAC3BiZ,EAAU5G,GAAU+F,UAAUpY,IAGhCvB,KAAKyU,cAAgB,SAACb,EAAUhR,EAAKiR,EAAQuF,EAAatW,GACxD0X,EAAU5G,GAAUkG,eAAelX,EAAKiR,EAAQuF,EAAatW,IAG/D9C,KAAK2U,aAAe,SAACf,EAAUhR,EAAKiR,EAAQuF,GAC1CoB,EAAU5G,GAAUiG,cAAcjX,EAAKiR,EAAQuF,IAGjDpZ,KAAKgV,WAAa,SAACpB,EAAUrS,GAC3BiZ,EAAU5G,GAAU+F,UAAUpY,IAGhCvB,KAAKoV,YAAc,SAACxB,EAAUrI,EAAOhK,GACnCiZ,EAAU5G,GAAUmG,WAAWxO,EAAOhK,IAGxCvB,KAAKkV,gBAAkB,SAACtB,EAAUrI,EAAOiH,EAAM1P,GAC7C0X,EAAU5G,GAAUgG,eAAerO,EAAOiH,EAAM1P,IAGlD9C,KAAKqU,+BAAiC,SAACT,GACrC4G,EAAU5G,GAAUqF,UAGtBjZ,KAAKgX,oBAAsB,SAAClM,EAAaxK,GACvC,IAAI2a,EAAcnQ,EAAY8D,aAAa,mBADSsM,EAAA,SAE5CzW,GACN+V,EAAUS,EAAYxW,IAAIuV,aAC1B9W,WAAW,WAENsX,EAAUS,EAAYxW,MACvB+V,EAAUS,EAAYxW,IAAIuK,qBAAsB,SACzCwL,EAAUS,EAAYxW,MAE9B8V,IARL,IAAI,IAAI9V,KAAKwW,EAAaC,EAAlBzW,GAURnE,GAAS,IAGXN,KAAKmb,mBAAqB,SAACC,GACzBX,EAAcW,GAGhBpb,KAAK0K,SAAW,SAACnE,GACfiE,EAASjE,GAGXvG,KAAKqb,oBAAsB,SAACnN,GAC1BkM,EAAmBlM,GAGrBlO,KAAKiT,GAAK,SAAC1H,EAAOjL,GAChBoa,EAAYnP,GAASjL,GAGvBN,KAAK4K,MAAQ,WAEX,IAAI,IAAInG,KADR8V,EAA+B,IAClBC,EACXA,EAAU/V,GAAGuK,qBAAsB,SAC5BwL,EAAU/V,GAEnB+V,EAAY,GACZH,EAAW,KACXI,EAAc,QACdL,EAAmB,KACnB5P,GAAS,EACRkQ,EAAc,IAKnB,SAASjJ,IAAuB,IAAA6J,EAAAtb,KAE9BA,KAAKub,qBAAuB,SAACjK,GAC3BgK,EAAKzJ,eAAiB,WAAY,QAAA2J,EAAAzX,UAAArD,OAAR4D,EAAQ,IAAAC,MAAAiX,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAARnX,EAAQmX,GAAA1X,UAAA0X,GAACnK,EAAeoK,gBAAgB,kBAAkBC,MAAM,KAAMrX,IAChGgX,EAAKrJ,YAAc,WAAY,QAAA2J,EAAA7X,UAAArD,OAAR4D,EAAQ,IAAAC,MAAAqX,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAARvX,EAAQuX,GAAA9X,UAAA8X,GAACvK,EAAeoK,gBAAgB,eAAeC,MAAM,KAAMrX,IAC1FgX,EAAKnJ,kBAAoB,WAAY,QAAA2J,EAAA/X,UAAArD,OAAR4D,EAAQ,IAAAC,MAAAuX,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAARzX,EAAQyX,GAAAhY,UAAAgY,GAACzK,EAAeoK,gBAAgB,qBAAqBC,MAAM,KAAMrX,IACtGgX,EAAKjJ,OAAS,WAAY,QAAA2J,EAAAjY,UAAArD,OAAR4D,EAAQ,IAAAC,MAAAyX,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAR3X,EAAQ2X,GAAAlY,UAAAkY,GAAC3K,EAAeoK,gBAAgB,UAAUC,MAAM,KAAMrX,KAIlFtE,KAAK4K,MAAQ,aAKf,SAAS0G,IAEP,IAAI4K,EAAU,CAGZjK,YAAa,WACXxK,EAAM4B,OAAO,QAAS,gCAGxB8I,kBAAmB,WACjB1K,EAAM4B,OAAO,QAAS,sCAIxBwI,eAAgB,WACdpK,EAAM4B,OAAO,QAAS,mCAGxB0I,qBAAsB,WACpBtK,EAAM4B,OAAO,QAAS,yCAIxB8S,OAAQ,WACN1U,EAAM4B,OAAO,QAAS,2BAIxB+S,OAAQ,WACN3U,EAAM4B,OAAO,QAAS,2BAGxBwL,QAAS,WACPpN,EAAM4B,OAAO,QAAS,6BAK1BrJ,KAAK6U,QAAU,SAAC/J,EAAauR,EAAQjB,EAAUkB,GAC7CJ,EAAO,QAAYG,EAAQC,EAAOlB,IAGpCpb,KAAKuc,aAAe,SAACzW,EAAMxF,GACzB4b,EAAQpW,GAAQxF,GAGlBN,KAAK0b,gBAAkB,SAAC5V,GACtB,OAAOoW,EAAQpW,IAGjB9F,KAAKwc,aAAe,SAAC1W,EAAMxF,GACzBA,GAAS,EAAO4b,EAAQpW,KAG1B9F,KAAKyc,sBAAwB,WAC3B,OAAOP,GAGTlc,KAAKsX,qBAAuB,aAI5BtX,KAAK4K,MAAQ,aAIf,SAASoL,IAAO,IACV0G,EAGAC,EAJUC,EAAA5c,KAGV6c,EAAW,GAEXC,EAAqB,GAEzB9c,KAAKiR,YAAc,WAAO5O,QAAQD,IAAI,wCAItCpC,KAAKuS,eAAiB,SAACzH,EAAa0H,GAClC,IACIuK,EADOha,KAAK0P,MAAM/O,EAAIO,OAAOuO,IACT0E,EACpB8F,EAAoBL,EAAeM,gBAAgB,OACvDnS,EAAYmD,UAAU,mBAAoB8O,GAC1CJ,EAAeO,2BAA2BH,EAAcC,EAAmB,SAACpa,EAAKua,GAC/ErS,EAAYmD,UAAU,kBAAmBkP,GACzC,IAAI7J,EAAQ,CACV8J,EAAGJ,EACHK,EAAGF,GAELR,EAAeW,cAAc,UAAWP,EAAcha,KAAKC,UAAUsQ,GAAQ,SAAC1Q,EAAKwT,GAC9ExT,EACDP,QAAQD,IAAIQ,IAGZga,EAAKpF,eAAe1M,EAAa,KAAM,KAAMpH,EAAIE,OAAOb,KAAKC,UAAUoT,KACvEtL,EAAYmD,UAAU,QAAQ,SAOtCjO,KAAKmW,QAAU,SAACrL,EAAa0H,EAAMlS,GACjCwK,EAAYqD,UAAU,kBAAmB,SAACvL,EAAKsL,GAC7CyO,EAAexG,QAAQ,YAAajI,EAAKsE,EAAM,SAAC5P,EAAKwT,GACnD9V,EAASsC,EAAKwT,QAKpBpW,KAAK6W,QAAU,SAAC/L,EAAa0H,EAAMlS,GACjC,GAAwC,YAArCwK,EAAY8D,aAAa,QAE1B,GAAc,OADDlL,EAAIO,OAAOuO,EAAKQ,MAAM,EAAG,KAGpC,GAAe,OADDtP,EAAIO,OAAOuO,EAAKQ,MAAM,EAAG,IAClB,CACnB,IAAIzR,EAAOiR,EAAKQ,MAAM,GACtB4J,EAAK7I,gBAAgBjJ,EAAavJ,SAIpCsb,EAAS/R,EAAYgE,cAAc0H,KAAK,WAAMlW,GAAS,EAAOkS,UAG7D,GAAuC,GAApC1H,EAAY8D,aAAa,SAA0D,WAAvC9D,EAAY6D,uBAC9DiO,EAAKW,kBAAkBzS,EAAa,SAAClI,EAAK4a,GACrCA,EACDld,GAAS,EAAOkS,GAGhB1H,EAAYH,iBAEX/H,GACDP,QAAQD,IAAIQ,UAIb,GAAuC,GAApCkI,EAAY8D,aAAa,SAA2D,WAAvC9D,EAAY6D,uBAE/D,GAAc,OADDjL,EAAIO,OAAOuO,EAAKQ,MAAM,EAAG,KAGpC,GAAe,OADDtP,EAAIO,OAAOuO,EAAKQ,MAAM,EAAG,IAClB,CACnB,IAAIzR,EAAOiR,EAAKQ,MAAM,GACtB4J,EAAKrK,eAAezH,EAAavJ,SAInCjB,GAAS,EAAOkS,QAIyB,IAArC1H,EAAY8D,aAAa,SAC/B+N,EAAe9F,QAAQ,YAAa/L,EAAY8D,aAAa,mBAAoB4D,EAAM,SAAC5P,EAAKkU,GAC3FxW,EAASsC,EAAKkU,MAKpB9W,KAAKiW,oBAAsB,SAACnL,EAAaxK,GACvCwK,EAAYqD,UAAU,OAAQ,SAACvL,EAAKoT,GAMhC1V,EAAS0V,MAKfhW,KAAKud,kBAAoB,SAACzS,EAAaxK,GACrCuc,EAAS/R,EAAYgE,cAAgB,CAACxO,GAEtC4C,WAAW,kBACF2Z,EAAS/R,EAAYgE,eACR,IAAnBgO,GAEH,IAAIxJ,EAAQ,CACV4D,EAAGwF,GAEL5R,EAAYmD,UAAU,OAAQ,WAC9B2O,EAAKpF,eAAe1M,EAAa,KAAM,KAAMpH,EAAIE,OAAOb,KAAKC,UAAUsQ,MAGzEtT,KAAKyd,uBAAyB,SAACC,GAC7BZ,EAAqBY,GAGvB1d,KAAK2d,mBAAqB,SAACC,GACzBjB,EAAiBiB,GAGnB5d,KAAK6d,qBAAuB,SAACC,EAAUC,GAErCrB,EAAWqB,GAGb/d,KAAK4K,MAAQ,WACX8R,EAAW,KAEXG,EAAW,GACXF,EAAiB,MAKrB,SAASqB,IAEP,IAAIC,EAAQ,CAEVC,UAAW,CACTZ,cAAe,SAACa,EAAQC,EAAW9d,GACjCuH,OAAOwW,OAAOC,OAAOC,UACjB,MACA,IAAIza,YAAY,SAASF,OAAOua,GAChC,CACIrY,KAAM,YAEV,EACA,CAAC,UAAW,YAEf0Y,KAAK,SAACtQ,GACL,IAAIuQ,EAAK,IAAI5a,WAAW,IACxBgE,OAAOwW,OAAOK,gBAAgBD,GAC9BL,EAAY,IAAIta,YAAY,SAASF,OAAOwa,GAC5CvW,OAAOwW,OAAOC,OAAOnI,QACnB,CACIrQ,KAAM,UACN2Y,GAAIA,GAERvQ,EACAkQ,GAEDI,KAAK,SAACpI,GACL9V,GAAS,EAAOmH,EAAMoB,oBAAoB4V,GAAIhX,EAAMoB,oBAAoBuN,MAEzEuI,MAAM,SAACC,GACNvc,QAAQoJ,MAAMmT,OAGjBD,MAAM,SAAC/b,GACJP,QAAQoJ,MAAM7I,MAGpBic,cAAe,SAACV,EAAQW,EAAWxe,GACjCuH,OAAOwW,OAAOC,OAAOC,UACjB,MACA,IAAIza,YAAY,SAASF,OAAOua,GAChC,CACIrY,KAAM,YAEV,EACA,CAAC,UAAW,YAEf0Y,KAAK,SAACtQ,GACL,IAAIuQ,EAAKhX,EAAMO,oBAAoB8W,EAAU5Y,UAAU,EAAG,KAC1D4Y,EAAYrX,EAAMO,oBAAoB8W,EAAU5Y,UAAU,KAC1D2B,OAAOwW,OAAOC,OAAOzH,QACnB,CACI/Q,KAAM,UACN2Y,GAAIA,GAERvQ,EACA4Q,GAEDN,KAAK,SAAC1H,GACLxW,GAAS,EAAO,IAAI4D,YAAY,SAASD,OAAO6S,MAEjD6H,MAAM,SAACC,GACNvc,QAAQoJ,MAAMmT,OAGjBD,MAAM,SAAC/b,GACJP,QAAQoJ,MAAM7I,MAGpBuT,QAAS,SAACgI,EAAQC,EAAW9d,GAC3BuH,OAAOwW,OAAOC,OAAOC,UACjB,MACA,IAAIza,YAAY,SAASF,OAAOua,GAChC,CACIrY,KAAM,YAEV,EACA,CAAC,UAAW,YAEf0Y,KAAK,SAACtQ,GACL,IAAIuQ,EAAK,IAAI5a,WAAW,IACpBkb,EAAO,IAAIlb,WAAW,IAC1BgE,OAAOwW,OAAOK,gBAAgBD,GAC9B5W,OAAOwW,OAAOK,gBAAgBK,GAC9BlX,OAAOwW,OAAOC,OAAOnI,QACnB,CACIrQ,KAAM,UACN2Y,GAAIA,GAERvQ,EACAxK,EAAIS,OAAO,CAAC4a,EAAMX,KAEnBI,KAAK,SAACpI,GACL,IACE9V,GAAS,EAAOoD,EAAIS,OAAO,CAACsa,EAAI,IAAI5a,WAAWuS,MAEjD,MAAOnT,GACLZ,QAAQD,IAAIa,MAGf0b,MAAM,SAACC,GACNvc,QAAQoJ,MAAMmT,OAGjBD,MAAM,SAAC/b,GACJP,QAAQoJ,MAAM7I,MAGpBiU,QAAS,SAACsH,EAAQW,EAAWxe,GAC3BuH,OAAOwW,OAAOC,OAAOC,UACjB,MACA,IAAIza,YAAY,SAASF,OAAOua,GAChC,CACIrY,KAAM,YAEV,EACA,CAAC,UAAW,YAEf0Y,KAAK,SAACtQ,GACL,IAAIuQ,EAAKK,EAAU9L,MAAM,EAAG,IAC5BnL,OAAOwW,OAAOC,OAAOzH,QACnB,CACI/Q,KAAM,UACN2Y,GAAIA,GAERvQ,EACA4Q,EAAU9L,MAAM,KAEjBwL,KAAK,SAAC1H,GACL,IACExW,GAAS,EAAO,IAAIuD,WAAWiT,EAAU9D,MAAM,MAEjD,MAAM/P,GACJZ,QAAQD,IAAIa,MAGf0b,MAAM,SAACC,GACNvc,QAAQoJ,MAAMmT,EAAKI,aAGtBL,MAAM,SAAC/b,GACJP,QAAQoJ,MAAM7I,EAAIoc,aAM1BC,QAAS,CACP3B,cAAe,SAAC4B,EAAWd,EAAW9d,GACpCuH,OAAOwW,OAAOC,OAAOC,UACnB,OACA9W,EAAMe,mBAAmB0W,GACzB,CACIpZ,KAAM,WACNqZ,KAAM,CAACrZ,KAAM,WAEjB,EACA,CAAC,YAGF0Y,KAAK,SAACtQ,GAELrG,OAAOwW,OAAOC,OAAOnI,QAAQ,CAACrQ,KAAQ,YAAaoI,EAAK,IAAIpK,YAAY,SAASF,OAAOwa,IAAYI,KAAK,SAACpI,GACxG9V,GAAS,EAAOmH,EAAMoB,oBAAoBuN,QAI7CuI,MAAM,SAAC/b,GACJP,QAAQD,IAAIQ,QAQtB5C,KAAKid,gBAAkB,SAACmC,GACtB,OAAO3V,KAAKM,MAAMN,KAAKC,SAAWD,KAAKM,MAAMqV,KAI/Cpf,KAAKkd,2BAA6B,SAACmC,EAASC,EAAShf,GACnDuH,OAAOwW,OAAOC,OAAOiB,OAAO,UAAW,IAAIzb,YAAY,SAASF,OAAOyb,EAAQC,IAAUd,KAAK,SAACW,GAC7F7e,GAAS,EAAQmH,EAAMoB,oBAAoBsW,GAAOjZ,UAAU,EAAG,QAInElG,KAAKsd,cAAgB,SAACkC,EAAMtR,EAAKkQ,EAAW9d,GAC1C,IACE2d,EAAMuB,GAAMlC,cAAcpP,EAAKkQ,EAAW9d,GAE5C,MAAM2C,GACJ3C,EAAS2C,KAKbjD,KAAK6e,cAAgB,SAACW,EAAMtR,EAAK4Q,EAAWxe,GAC1C,IACE2d,EAAMuB,GAAMX,cAAc3Q,EAAK4Q,EAAWxe,GAE5C,MAAM2C,GACJ3C,EAAS2C,KAKbjD,KAAKmW,QAAU,SAACqJ,EAAMtR,EAAKkQ,EAAW9d,GACpC,IACE2d,EAAMuB,GAAMrJ,QAAQjI,EAAKkQ,EAAW9d,GAEtC,MAAM2C,GACJ3C,EAAS2C,KAKbjD,KAAK6W,QAAU,SAAC2I,EAAMtR,EAAK4Q,EAAWxe,GACpC,IACE2d,EAAMuB,GAAM3I,QAAQ3I,EAAK4Q,EAAWxe,GAEtC,MAAM2C,GACJ3C,EAAS2C,KAIbjD,KAAK4K,MAAQ,aAwJf,IAAI6U,EAAQ,IArJZ,WAA+B,IAAAC,EAAA1f,KACzBsG,EAAU,SAACgD,EAAKlH,IACfiE,EAASC,SAASD,EAASE,QAC5BkB,EAAM4B,OAAOC,EAAKlH,IAItBkE,EAAQ,OAAQ,yBAChB,IAAIqZ,EAAc,IAAI/T,EAAW,CAACG,uBAAuB,IACrD6T,EAAwB,IAAInO,EAC5BoO,EAAU,IAAIvK,EACdwK,EAAY,IAAInN,EAChBoN,EAAkB,IAAIzO,EACtB0O,EAAQ,IAAIhK,EACZiK,EAAY,IAAIjC,EAEpBhe,KAAKkgB,2BAA6B,WAChC5Z,EAAQ,OAAQ,qCAChBoZ,EAAKS,YAAYta,EAAU,WAE3Bka,EAAgBxD,aAAa,SAAU,SAACzR,EAAavJ,EAAMqQ,GACzD/J,OAAOC,SAASsY,QAAQ/Z,EAASK,eAAe,0BAA0BL,EAASM,WAAW,cAAcN,EAASvB,SAAS,SAASuB,EAASrB,WAAW,aAAa6C,OAAOC,SAASuY,QAI1LN,EAAgBxD,aAAa,UAAW,SAAC3Z,EAAK0Z,GAC5CrX,EAAU,UAAWqX,EAAO,GACzB7U,EAAMC,iBAAiB,aACxBG,OAAOC,SAASsY,QAAQ3Y,EAAMC,iBAAiB,eAInDqY,EAAgBxD,aAAa,UAAW,SAAC3Z,EAAKwY,GAC5CnW,EAAU,SAAUmW,EAAU,KAC1BA,GACFhV,EAAY,YAIhB2Z,EAAgBxD,aAAa,SAAU,SAAC3Z,EAAK0d,GAC3Cla,EAAY,UACZA,EAAY,WACZyB,OAAOC,SAASyY,WAGlBR,EAAgBxD,aAAa,oBAAqB,SAACzR,EAAavJ,EAAMqQ,GACpEmO,EAAgBrE,gBAAgB,SAAhCqE,CAA0CjV,EAAavJ,EAAMqQ,EAAc,WAI7EmO,EAAgBxD,aAAa,cAAe,SAACzR,EAAavJ,EAAMqQ,GAa1D/L,EAAU,WAZC,SAACjD,EAAK0Z,GACnB,IAAIhJ,EAAQ,CACVZ,EAAE,KACFrN,EAAE,CACAkO,EAAGhS,EAAK8D,EAAEkO,EACViN,EAAGlE,IAGP1K,EAAa9G,EAAawI,GAQ1BhT,CAAS,EAAOuF,EAAU,YAH1Bka,EAAgBrE,gBAAgB,SAAhCqE,CAA0CjV,EAAavJ,EAAMqQ,EAAc,WAS/EmO,EAAgBxD,aAAa,iBAAkB,SAACzR,EAAavJ,EAAMqQ,GACjE/J,OAAO4Y,KAAKpa,EAASK,eAAe,6BAA6BL,EAASM,WAAW,cAAcN,EAASvB,SAAS,SAASuB,EAASrB,WAAW,aAAaqB,EAASG,KAAK,cAAcjF,EAAK8D,EAAEkO,EAAE,aAAa1L,OAAOC,SAASuY,QAGnON,EAAgBW,4BAA8B,SAACpgB,GAC7Cqf,EAAYnQ,aAAanJ,EAASM,WAAYN,EAASvB,SAAUuB,EAASrB,WAAY1E,IAGxFgG,EAAQ,OAAQ,2CAIlBtG,KAAKiZ,OAAS,WAEZ3S,EAAQ,OAAQ,2BAChB,IAAI0K,EAAc,CACd2F,SAAUtQ,EACVoL,qBAAsBmO,EACtBjN,SAAWmN,EACXlU,WAAY+T,EACZrK,OAAQuK,EACRrO,UAAW/J,EACX6J,eAAgByO,EAChB/B,SAAUiC,EACVjK,KAAMgK,GAEV1Z,EAAQ,OAAQ,8BAEhBqZ,EAAYjV,SAASrE,EAASE,OAC9BoZ,EAAY9O,8BAA8BjK,EAAUI,4BAGpDgZ,EAAMrC,mBAAmBsC,GAGtB5Z,EAASE,OACVsZ,EAAQtJ,eAAe,SAAC3T,EAAK2U,GAC3B9P,EAAM4B,OAAO,QAASkO,KAG1BsI,EAAQnJ,WAAW1F,GAGnB4O,EAAsBrE,qBAAqBwE,GAG3CD,EAAUpV,SAASrE,EAASE,OAE5BD,EAAQ,OAAQ,8BAEhBA,EAAQ,OAAQ,8BAGlBtG,KAAKsC,OAAS,WACZyd,EAAgBrE,gBAAgB,SAAhCqE,IAGF/f,KAAK2gB,wBAA0B,SAACrgB,GAC9BA,GAAS,EAAOyf,IAGlB/f,KAAK2C,qBAAuB,SAACoC,EAAQD,EAAUE,EAAYoO,EAAS9S,GAClEwf,EAAUnd,qBAAqBoC,EAAQD,EAAUE,EAAYoO,EAAS/M,EAASG,KAAMlG,IAGvFN,KAAKmgB,YAAc,SAACS,GAClBva,EAASG,KAAOoa,GAGlB5gB,KAAK6gB,YAAc,WACjB,OAAOxa,EAASG,OAQpBxG,KAAKiL,QAAU,aAEfjL,KAAK0K,SAAW,SAACoW,GACfza,EAASE,MAAQua,GAEnB9gB,KAAK2C,qBAAuB,SAACyQ,EAAS9S,GACpCmf,EAAM9c,qBAAqB0D,EAASM,WAAYN,EAASvB,SAAUuB,EAASrB,WAAYoO,EAAS9S,IAEnGN,KAAK+gB,YAAc,SAACH,GAClBnB,EAAMU,YAAYS,IAEpB5gB,KAAKghB,eAAiB,WACpB,OAAOvB,EAAMoB,eAEf7gB,KAAKsC,OAAS,WACZmd,EAAMnd,UAERtC,KAAK2gB,wBAA0B,SAACrgB,GAC9Bmf,EAAMkB,wBAAwBrgB,IAEhCN,KAAKihB,KAAO,SAACnc,EAAUC,EAAQC,GAC1BF,IACDuB,EAASvB,SAAWA,GAQnBC,IACDsB,EAASM,WAAa5B,GAGV,oBAAXA,EACDsB,EAASrB,WAAa,MAEL,cAAVD,IACPsB,EAASrB,WAAa,OAGrBA,IACDqB,EAASrB,WAAaA,GAGxByC,EAAM2B,UAAUxC,EAAUC,QAASD,EAAUG,WAE7CU,EAAM4B,OAAO,OAAQ,aAAahD,EAASM,WAAW,OAAO7B,EAAS,IAAIuB,EAASrB,YACnFya,EAAMS,6BAEN,IACET,EAAMxG,SAER,MAAMhW,GACJoD,EAASM,WAAa,YACtB8Y,EAAMxG,WAIVjZ,KAAKihB,KAAKnc,EAAUC,EAAQC,ICnhExBrD,GAHQiF,EAAUsa,MAGN,IAAIC,EAASva,EAAUP,SAAS+a,UAAUC,KAAMza,EAAUP,SAAS+a,UAAUpU,OAgBhFsU,MAdf,SAAcpgB,GAAU,IAAAU,EAAA5B,KAGtBA,KAAKH,WAAaA,EAAWoB,mBAAmBC,GAChDlB,KAAK2B,UAAYA,EACjB3B,KAAK0B,QAAU,IAAIA,EAAQC,EAAW3B,KAAKH,YAC3CG,KAAK0B,QAAQ6f,gBAAkBvhB,KAAKuhB,gBACpCvhB,KAAK+B,QAAU/B,KAAK0B,QAAQK,QAE5B/B,KAAKuC,MAAQ,SAACC,GACZZ,EAAKF,QAAQa,MAAMC,2JCRjBgf,EAAYC,YAAW,CAC3BC,OAAQ,CACNC,aAAc,GACdC,MAAO,GACPC,OAAQ,IAEVC,KAAM,CACJC,SAAU,KAEZC,OAAQ,CACNC,QAAS,eACTC,OAAQ,QACRC,UAAW,cAEbC,MAAO,CACLC,SAAU,IAEZlL,IAAK,CACHwK,aAAc,MAIZW,EAAa,SAAC7O,GAClB,MAAiB,kBAANA,EAAuB,GAC3BA,EAAExN,OAAO,GAAGsc,cAAgB9O,EAAET,MAAM,IAGtC,SAASwP,EAASC,GACvB,IAAMC,EAAUlB,IAChB,OACImB,EAAAtF,EAAAuF,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,WAAW,SAASC,QAAS,GAC5DN,EAAAtF,EAAAuF,cAACC,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACbR,EAAAtF,EAAAuF,cAACQ,EAAA,EAAD,CAAQC,UAAWX,EAAQhB,QAASe,EAAMa,UAAUlI,SAASqH,EAAMa,UAAUlI,SAASpI,MAAM,EAAG,GAAG,MAClG2P,EAAAtF,EAAAuF,cAACW,EAAA,EAAD,CAAaC,QAAQ,KAAKC,UAAU,MACjC,UAAWhB,EAAMiB,SAASC,QAAU,IAAMlB,EAAMa,UAAUM,UAAY,IAAMnB,EAAMa,UAAUO,UAG/FlB,EAAAtF,EAAAuF,cAACW,EAAA,EAAD,CAAaC,QAAQ,IAAIC,UAAU,KAChC,kEAGLd,EAAAtF,EAAAuF,cAACC,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACbR,EAAAtF,EAAAuF,cAACkB,EAAA,EAAD,CAAMT,UAAWX,EAAQqB,UACvBpB,EAAAtF,EAAAuF,cAACoB,EAAA,EAAD,KACErB,EAAAtF,EAAAuF,cAACW,EAAA,EAAD,CAAaC,QAAQ,KAAKC,UAAU,MACjCnB,EAAWG,EAAMiB,SAASO,eAE7BtB,EAAAtF,EAAAuF,cAACsB,EAAA,EAAD,CAAMb,UAAWX,EAAQyB,MACvBxB,EAAAtF,EAAAuF,cAACwB,EAAA,EAAD,KACEzB,EAAAtF,EAAAuF,cAACyB,EAAA,EAAD,KACE1B,EAAAtF,EAAAuF,cAAC0B,EAAAjH,EAAD,OAEFsF,EAAAtF,EAAAuF,cAAC2B,EAAA,EAAD,CAAcC,QAAS,WAAYC,UAAW,yCAC9C9B,EAAAtF,EAAAuF,cAAC8B,EAAA,EAAD,CAASC,MAAM,WAAf,SAEFhC,EAAAtF,EAAAuF,cAACgC,EAAA,EAAD,CAASnB,UAAU,OACnBd,EAAAtF,EAAAuF,cAACwB,EAAA,EAAD,KACEzB,EAAAtF,EAAAuF,cAAC2B,EAAA,EAAD,CAAcC,QAAS/B,EAAMiB,SAAStI,SAAUqJ,UAAWhC,EAAMa,UAAUlI,YAE7EuH,EAAAtF,EAAAuF,cAACwB,EAAA,EAAD,KACEzB,EAAAtF,EAAAuF,cAAC2B,EAAA,EAAD,CAAcC,QAAS/B,EAAMiB,SAASE,UAAWa,UAAWhC,EAAMa,UAAUM,aAE9EjB,EAAAtF,EAAAuF,cAACwB,EAAA,EAAD,KACEzB,EAAAtF,EAAAuF,cAAC2B,EAAA,EAAD,CAAcC,QAAS/B,EAAMiB,SAASG,SAAUY,UAAWhC,EAAMa,UAAUO,YAE7ElB,EAAAtF,EAAAuF,cAACwB,EAAA,EAAD,KACEzB,EAAAtF,EAAAuF,cAAC2B,EAAA,EAAD,CAAcC,QAAS/B,EAAMiB,SAASmB,OAAQJ,UAAWhC,EAAMa,UAAUuB,UAG3ElC,EAAAtF,EAAAuF,cAACgC,EAAA,EAAD,CAASnB,UAAU,OACnBd,EAAAtF,EAAAuF,cAACwB,EAAA,EAAD,KACEzB,EAAAtF,EAAAuF,cAACyB,EAAA,EAAD,KACE1B,EAAAtF,EAAAuF,cAAC0B,EAAAjH,EAAD,OAEFsF,EAAAtF,EAAAuF,cAAC2B,EAAA,EAAD,CAAcC,QAAS,iBAAkBC,UAAW,0CACpD9B,EAAAtF,EAAAuF,cAAC8B,EAAA,EAAD,CAASC,MAAM,WAAf,SAEFhC,EAAAtF,EAAAuF,cAACgC,EAAA,EAAD,CAASnB,UAAU,OAGnBd,EAAAtF,EAAAuF,cAACwB,EAAA,EAAD,KACEzB,EAAAtF,EAAAuF,cAAC2B,EAAA,EAAD,CAAcC,QAAS/B,EAAMiB,SAASoB,aAAcL,UAAWhC,EAAMa,UAAUyB,eAEjFpC,EAAAtF,EAAAuF,cAACwB,EAAA,EAAD,KACEzB,EAAAtF,EAAAuF,cAAC2B,EAAA,EAAD,CAAcC,QAAS/B,EAAMiB,SAASsB,MAAOP,UAAWhC,EAAMa,UAAU0B,SAE1ErC,EAAAtF,EAAAuF,cAACgC,EAAA,EAAD,CAASnB,UAAU,OAEnBd,EAAAtF,EAAAuF,cAACwB,EAAA,EAAD,KACEzB,EAAAtF,EAAAuF,cAACyB,EAAA,EAAD,KACE1B,EAAAtF,EAAAuF,cAACqC,EAAA5H,EAAD,OAEFsF,EAAAtF,EAAAuF,cAAC2B,EAAA,EAAD,CAAcC,QAAS,oBAAqBC,UAAW,0CAEzD9B,EAAAtF,EAAAuF,cAACgC,EAAA,EAAD,CAASnB,UAAU,OACnBd,EAAAtF,EAAAuF,cAACwB,EAAA,EAAD,KACEzB,EAAAtF,EAAAuF,cAAC2B,EAAA,EAAD,CAAcC,QAAS/B,EAAMiB,SAASwB,QAAST,UAAW,iBAE5D9B,EAAAtF,EAAAuF,cAACgC,EAAA,EAAD,CAASnB,UAAU,SAGvBd,EAAAtF,EAAAuF,cAACuC,EAAA,EAAD,mFCvGZ,SAASC,KACP,OACEzC,EAAAtF,EAAAuF,cAACW,EAAA,EAAD,CAAYC,QAAQ,QAAQmB,MAAM,gBAAgBU,MAAM,UACrD,sBAAkB,IAAI/f,MAAOggB,cAAc,eAC5C3C,EAAAtF,EAAAuF,cAAC2C,EAAA,EAAD,CAAMZ,MAAM,UAAUtE,KAAK,sBAA3B,aAEQ,IAEP,KAKP,IAAM3Y,GAAmB,SAACC,GAInB,IAFA,IACIC,EADQC,OAAOC,SAASxE,OAAO4C,UAAU,GAC5B1C,MAAM,KACdiB,EAAE,EAAEA,EAAEmD,EAAKlH,OAAO+D,IAAK,CACxB,IAAIsD,EAAOH,EAAKnD,GAAGjB,MAAM,KACzB,GAAGuE,EAAK,KAAOJ,EAAU,OAAOI,EAAK,GAE7C,OAAO,GAGR9C,GAAY,SAACC,EAAOC,EAAQC,GAChC,IAAIC,EAAI,IAAIC,KACZD,EAAEE,QAAQF,EAAEG,UAAsB,GAATJ,EAAc,GAAK,GAAK,KACjD,IAAIK,EAAU,WAAWJ,EAAEK,cAC3BC,SAASC,OAASV,EAAQ,IAAMC,EAAS,IAAMM,EAAU,WAGrD+b,GAAYC,YAAW,SAAA+D,GAAK,MAAK,CACrCC,UAAW,CACTC,KAAM,CACJC,gBAAiBH,EAAMI,QAAQC,OAAOC,QAG1CC,MAAO,CACLC,UAAWR,EAAMvC,QAAQ,GACzBhB,QAAS,OACTgE,cAAe,SACfjD,WAAY,UAEdtB,OAAQ,CACNQ,OAAQsD,EAAMvC,QAAQ,GACtB0C,gBAAiBH,EAAMI,QAAQnB,UAAUyB,MAE3CC,KAAM,CACJvE,MAAO,OACPoE,UAAWR,EAAMvC,QAAQ,IAE3BmD,OAAQ,CACNlE,OAAQsD,EAAMvC,QAAQ,EAAG,EAAG,OAIzB,SAASoD,GAAW5D,GACzB,IAAMC,EAAUlB,KADgB8E,EAEAC,IAAMC,WAFNC,EAAA3mB,OAAA4mB,EAAA,EAAA5mB,CAAAwmB,EAAA,GAEzBlL,EAFyBqL,EAAA,GAEf1F,EAFe0F,EAAA,GAAAE,EAGAJ,IAAMC,WAHNI,EAAA9mB,OAAA4mB,EAAA,EAAA5mB,CAAA6mB,EAAA,GAGzBE,EAHyBD,EAAA,GAGfE,EAHeF,EAAA,GAAAG,EAIJR,IAAMC,SAAS,kEAJXQ,EAAAlnB,OAAA4mB,EAAA,EAAA5mB,CAAAinB,EAAA,GAIzB1K,EAJyB2K,EAAA,GAIjBC,EAJiBD,EAAA,GA4ChC,OACErE,EAAAtF,EAAAuF,cAACsE,EAAA,EAAD,CAAWzD,UAAU,OAAO0D,SAAS,MACnCxE,EAAAtF,EAAAuF,cAACwE,EAAA,EAAD,MACAzE,EAAAtF,EAAAuF,cAAA,OAAKS,UAAWX,EAAQqD,OACtBpD,EAAAtF,EAAAuF,cAACQ,EAAA,EAAD,CAAQC,UAAWX,EAAQhB,QACzBiB,EAAAtF,EAAAuF,cAACyE,EAAAhK,EAAD,OAEFsF,EAAAtF,EAAAuF,cAACW,EAAA,EAAD,CAAYE,UAAU,KAAKD,QAAQ,MAAnC,uBAGAb,EAAAtF,EAAAuF,cAACW,EAAA,EAAD,CAAYE,UAAU,IAAID,QAAQ,KAC/BnH,GAEHsG,EAAAtF,EAAAuF,cAAA,QAAMS,UAAWX,EAAQyD,KAAMmB,YAAU,GACvC3E,EAAAtF,EAAAuF,cAAC2E,EAAA,EAAD,CACEC,SAAU,SAAAC,GAAG,OAjDQ,SAACA,GAC9B1G,EAAY0G,EAAIC,OAAOxd,OAgDEyd,CAAyBF,IAC1CjE,QAAQ,WACRtB,OAAO,SACP0F,UAAQ,EACRC,WAAS,EACTtnB,GAAG,WACHunB,MAAM,WACNhiB,KAAK,WACLiiB,aAAa,WACbC,WAAS,IAEXrF,EAAAtF,EAAAuF,cAAC2E,EAAA,EAAD,CACEC,SAAU,SAAAC,GAAG,OAjEQ,SAACA,GAC9BX,EAAYW,EAAIC,OAAOxd,OAgEE+d,CAAyBR,IAC1CjE,QAAQ,WACRtB,OAAO,SACP0F,UAAQ,EACRC,WAAS,EACT/hB,KAAK,WACLgiB,MAAM,WACNzmB,KAAK,WACLd,GAAG,WACHwnB,aAAa,qBAEfpF,EAAAtF,EAAAuF,cAAC8B,EAAA,EAAD,CACEmD,WAAS,EACTrE,QAAQ,YACRmB,MAAM,UACNtB,UAAWX,EAAQ0D,OACnB8B,gBAAc,EACdC,QA1EG,WACX,IACE1F,EAAM5d,IAAI8b,wBAAwB,SAAC/d,EAAKwlB,GACtCA,EAAiB1H,4BAA4B,SAAC9d,EAAKkI,GAEjD,IAAIwI,EAAQ,CACVwB,EAAGsG,EACHlE,EAAG2P,GAELuB,EAAiB1M,gBAAgB,UAAjC0M,EAA4C,EAAO9U,EAAMwB,GACzDsT,EAAiB7L,aAAa,UAAW,SAAC3Z,EAAK0Z,GAC1CA,GACDrX,GAAU,UAAWqX,EAAO,GAC5BpZ,WAAWuf,EAAM4F,SAAU,MAG3BpB,EAAU,iCAGdmB,EAAiBnX,YAAYnG,EAAa,KAAMwI,OAKtD,MAAMrQ,GACJZ,QAAQD,IAAIa,MA2CR,WAUA0f,EAAAtF,EAAAuF,cAACC,EAAA,EAAD,CAAMC,WAAS,GACbH,EAAAtF,EAAAuF,cAACC,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAE,GACXR,EAAAtF,EAAAuF,cAAC2C,EAAA,EAAD,CAAMlF,KAAK,IAAImD,QAAQ,SAAvB,qBAIFb,EAAAtF,EAAAuF,cAACC,EAAA,EAAD,CAAMK,MAAI,GACRP,EAAAtF,EAAAuF,cAAC2C,EAAA,EAAD,CAAMlF,KAAK,IAAImD,QAAQ,SACpB,sCAMXb,EAAAtF,EAAAuF,cAAC0F,EAAA,EAAD,CAAKC,GAAI,GACP5F,EAAAtF,EAAAuF,cAACwC,GAAD,QAMD,SAASoD,GAAa/F,GAC3B,IAAMC,EAAUlB,KADkBiH,EAEFlC,IAAMC,WAFJkC,EAAA5oB,OAAA4mB,EAAA,EAAA5mB,CAAA2oB,EAAA,GAE3B5B,EAF2B6B,EAAA,GAEjB5B,EAFiB4B,EAAA,GAAAC,EAGNpC,IAAMC,SAAS,kFAHToC,EAAA9oB,OAAA4mB,EAAA,EAAA5mB,CAAA6oB,EAAA,GAG3BtM,EAH2BuM,EAAA,GAAAA,EAAA,GA0BlC,OACEjG,EAAAtF,EAAAuF,cAACsE,EAAA,EAAD,CAAWzD,UAAU,OAAO0D,SAAS,MACnCxE,EAAAtF,EAAAuF,cAACwE,EAAA,EAAD,MACAzE,EAAAtF,EAAAuF,cAAA,OAAKS,UAAWX,EAAQqD,OACtBpD,EAAAtF,EAAAuF,cAACQ,EAAA,EAAD,CAAQC,UAAWX,EAAQhB,QACzBiB,EAAAtF,EAAAuF,cAACyE,EAAAhK,EAAD,OAEFsF,EAAAtF,EAAAuF,cAACW,EAAA,EAAD,CAAYE,UAAU,KAAKD,QAAQ,MAAnC,uBAGAb,EAAAtF,EAAAuF,cAACW,EAAA,EAAD,CAAYE,UAAU,IAAID,QAAQ,KAC/BnH,GAEHsG,EAAAtF,EAAAuF,cAAA,QAAMS,UAAWX,EAAQyD,KAAMmB,YAAU,GACvC3E,EAAAtF,EAAAuF,cAAC2E,EAAA,EAAD,CACErd,MAAOuY,EAAM5d,IAAImc,iBAAiByB,EAAM5d,IAAImc,iBAAiB,OAC7D6H,WAAY,CACVC,UAAU,GAEZtF,QAAQ,WACRtB,OAAO,SACP0F,UAAQ,EACRC,WAAS,EACTtnB,GAAG,WACHunB,MAAM,WACNhiB,KAAK,WACLiiB,aAAa,aAEfpF,EAAAtF,EAAAuF,cAAC2E,EAAA,EAAD,CACEC,SAAU,SAAAC,GAAG,OAlDQ,SAACA,GAC9BX,EAAYW,EAAIC,OAAOxd,OAiDE+d,CAAyBR,IAC1CjE,QAAQ,WACRtB,OAAO,SACP0F,UAAQ,EACRC,WAAS,EACT/hB,KAAK,WACLgiB,MAAM,WACNzmB,KAAK,WACLd,GAAG,WACHwnB,aAAa,mBACbC,WAAS,IAEXrF,EAAAtF,EAAAuF,cAAC8B,EAAA,EAAD,CACEmD,WAAS,EACTrE,QAAQ,YACRmB,MAAM,UACNtB,UAAWX,EAAQ0D,OACnB8B,gBAAc,EACdC,QAhEG,WACX1F,EAAM5d,IAAI8b,wBAAwB,SAAC/d,EAAKwlB,GACxCA,EAAiB1H,4BAA4B,SAAC9d,EAAKkI,GACjD,IAAIwI,EAAQ,CACVZ,EAAG,KACHrN,EAAG,CACDkO,EAAG7L,GAAiB,aACpB8Y,EAAGqG,IAGPuB,EAAiB5Q,eAAe1M,EAAa,KAAM,KAAM,IAAIjH,WAAW,IAAIC,YAAY,SAASF,OAAOb,KAAKC,UAAUsQ,MACvHpQ,WAAWuf,EAAM4F,SAAU,WA+CvB,WAUA1F,EAAAtF,EAAAuF,cAACC,EAAA,EAAD,CAAMC,WAAS,GACbH,EAAAtF,EAAAuF,cAACC,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAE,GACXR,EAAAtF,EAAAuF,cAAC2C,EAAA,EAAD,CAAMlF,KAAK,IAAImD,QAAQ,SAAvB,qBAIFb,EAAAtF,EAAAuF,cAACC,EAAA,EAAD,CAAMK,MAAI,GACRP,EAAAtF,EAAAuF,cAAC2C,EAAA,EAAD,CAAMlF,KAAK,IAAImD,QAAQ,SACpB,sCAMXb,EAAAtF,EAAAuF,cAAC0F,EAAA,EAAD,CAAKC,GAAI,GACP5F,EAAAtF,EAAAuF,cAACwC,GAAD,0MCxOF2D,GADYnpB,EAAQ,IACEyG,SAAS2iB,UAuD/BxD,GAAQyD,aAAe,CAC3BrD,QAAS,CACPpB,QAAS,CAAE0B,KAAMgD,KAAK,MACtBzE,UAAW,CAAEyB,KAAM,YAGrBiD,WAAY,CAAEC,iBAAiB,GAE/BC,WAAY,CACVC,YAAa,GACbC,YAAa,MAKXC,eACJ,SAAAA,EAAY/G,GAAO,IAAA7gB,EAAA,OAAA9B,OAAAC,EAAA,EAAAD,CAAAE,KAAAwpB,IACjB5nB,EAAA9B,OAAA2pB,EAAA,EAAA3pB,CAAAE,KAAAF,OAAA4pB,EAAA,EAAA5pB,CAAA0pB,GAAA3mB,KAAA7C,KAAMyiB,KA4BRkH,aAAe,SAACrZ,GAAD,OAAS,WACtB1O,EAAKV,SAAS,CAAC0oB,aAActZ,MA5B7B1O,EAAKioB,WAAa,IAAIvI,EAAK1f,EAAKV,SAAS4oB,KAAdhqB,OAAAiqB,EAAA,EAAAjqB,QAAAiqB,EAAA,EAAAjqB,CAAA8B,MAC3BA,EAAKooB,QAAUpoB,EAAKioB,WAAW9nB,QAC/BH,EAAKqoB,MAAO,CACV3oB,KAAM,KACNE,UAAWiB,EACXmnB,cAAc,EACdnoB,SAAU,IARKG,mFAYC,IAAA+J,EAAA3L,KAClBA,KAAK6pB,WAAWloB,UAAUgf,wBAAwB,SAAC/d,EAAKsnB,GACtDve,EAAKqe,QAAQ5nB,IAAI,YAAa,gCAC9B8nB,EAAiB3N,aAAa,SAAU,SAACzR,EAAavJ,EAAM4oB,GAC1Dxe,EAAKqe,QAAQ5nB,IAAI,iBAAkB,iCACnCuJ,EAAKye,QAAQ5T,KAAK,uBAEpB0T,EAAiB3N,aAAa,iBAAkB,SAACzR,EAAavJ,EAAM4oB,GAClExe,EAAKqe,QAAQ5nB,IAAI,iBAAkB,0CACnCuJ,EAAKye,QAAQ5T,KAAK,iCAAiCjV,EAAK8D,EAAEkO,KAE5D5H,EAAKke,WAAWtnB,MAAM,WACpBF,QAAQD,IAAI,4DAST,IAAA6K,EAAAjN,KACA0iB,EAAW1iB,KAAKyiB,MAAhBC,QAED2H,EACJ1H,EAAAtF,EAAAuF,cAAA,OAAKS,UAAWX,EAAQ4H,YACtB3H,EAAAtF,EAAAuF,cAACwB,EAAA,EAAD,CAAUmG,QAAM,GACd5H,EAAAtF,EAAAuF,cAAC2B,EAAA,EAAD,CAAcC,QAAS,aAAaxkB,KAAKiqB,MAAMzoB,UAAUxB,KAAKiqB,MAAM3oB,MAAMkpB,WAE5E7H,EAAAtF,EAAAuF,cAACwB,EAAA,EAAD,CAAUmG,QAAM,GACd5H,EAAAtF,EAAAuF,cAAC6H,GAAA,EAAD,KAAgB9H,EAAAtF,EAAAuF,cAACQ,EAAA,EAAD,WAChBT,EAAAtF,EAAAuF,cAAC2B,EAAA,EAAD,CAAcC,QAASxkB,KAAKiqB,MAAMxoB,SAAS2Z,YAE7CuH,EAAAtF,EAAAuF,cAACgC,EAAA,EAAD,MACAjC,EAAAtF,EAAAuF,cAACwB,EAAA,EAAD,CAAUmG,QAAM,GACd5H,EAAAtF,EAAAuF,cAACyB,EAAA,EAAD,KAAc1B,EAAAtF,EAAAuF,cAAC8H,GAAArN,EAAD,OACdsF,EAAAtF,EAAAuF,cAAC2B,EAAA,EAAD,CAAcC,QAASxkB,KAAKiqB,MAAMzoB,UAAUxB,KAAKiqB,MAAM3oB,MAAMqpB,QAE/DhI,EAAAtF,EAAAuF,cAACwB,EAAA,EAAD,CAAUmG,QAAM,GACd5H,EAAAtF,EAAAuF,cAACyB,EAAA,EAAD,KAAc1B,EAAAtF,EAAAuF,cAACgI,GAAAvN,EAAD,OACdsF,EAAAtF,EAAAuF,cAAC2B,EAAA,EAAD,CAAcC,QAASxkB,KAAKiqB,MAAMzoB,UAAUxB,KAAKiqB,MAAM3oB,MAAMupB,mBAE/DlI,EAAAtF,EAAAuF,cAACwB,EAAA,EAAD,CAAUmG,QAAM,EAACpC,QAAS,WACxBlb,EAAK+c,QAAQ1nB,WAEbqgB,EAAAtF,EAAAuF,cAACyB,EAAA,EAAD,KAAc1B,EAAAtF,EAAAuF,cAACkI,GAAAzN,EAAD,OACdsF,EAAAtF,EAAAuF,cAAC2B,EAAA,EAAD,CAAcC,QAASxkB,KAAKiqB,MAAMzoB,UAAUxB,KAAKiqB,MAAM3oB,MAAMgB,UAE/DqgB,EAAAtF,EAAAuF,cAACgC,EAAA,EAAD,MACAjC,EAAAtF,EAAAuF,cAACsB,EAAA,EAAD,KACEvB,EAAAtF,EAAAuF,cAACwB,EAAA,EAAD,CAAUmG,QAAM,GACd5H,EAAAtF,EAAAuF,cAACyB,EAAA,EAAD,KAAc1B,EAAAtF,EAAAuF,cAACqC,EAAA5H,EAAD,OACdsF,EAAAtF,EAAAuF,cAAC2B,EAAA,EAAD,CAAcC,QAASxkB,KAAKiqB,MAAMzoB,UAAUxB,KAAKiqB,MAAM3oB,MAAM4jB,aAMrE,OACEvC,EAAAtF,EAAAuF,cAACmI,EAAA,EAAD,CAAQC,SAAUjC,IAChBpG,EAAAtF,EAAAuF,cAACqI,GAAA,EAAD,CAAkBzF,MAAOA,IACzB7C,EAAAtF,EAAAuF,cAACsI,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM,WAAYC,OAAQ,SAAC5I,GAEtC,OADAxV,EAAKmd,QAAU3H,EAAM2H,QAEnBzH,EAAAtF,EAAAuF,cAAA,OAAKS,UAAWX,EAAQyB,MACtBxB,EAAAtF,EAAAuF,cAACsI,EAAA,EAAD,KACEvI,EAAAtF,EAAAuF,cAACsI,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,oBAAoBC,OAAQ,SAAC5I,GAC7C,OACEE,EAAAtF,EAAAuF,cAACyD,GAAD,CAAYiF,UAAW,GAAIzmB,IAAKoI,EAAK4c,WAAWloB,UAAW0mB,SAAU,WAAKxgB,OAAOC,SAASsY,QAAQ2I,UAGtGpG,EAAAtF,EAAAuF,cAACsI,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,sBAAsBC,OAAQ,SAAC5I,GAC/C,OACEE,EAAAtF,EAAAuF,cAAC4F,GAAD,CAAc3jB,IAAKoI,EAAK4c,WAAWloB,UAAW0mB,SAAU5F,EAAM2H,QAAQmB,YAG1E5I,EAAAtF,EAAAuF,cAACsI,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM,WAAYC,OAAQ,SAAC5I,GACtC,MACE,CACEE,EAAAtF,EAAAuF,cAAC4I,GAAA,EAAD,CAAQnI,UAAWX,EAAQ+I,UAAWC,SAAS,SAC7C/I,EAAAtF,EAAAuF,cAAC+I,GAAA,EAAD,KACEhJ,EAAAtF,EAAAuF,cAACgJ,GAAA,EAAD,CAAYvI,UAAWX,EAAQ2G,WAAYwC,aAAW,cAAc1D,QAASlb,EAAK0c,cAAa,IAC7FhH,EAAAtF,EAAAuF,cAACkJ,GAAAzO,EAAD,OAEFsF,EAAAtF,EAAAuF,cAACW,EAAA,EAAD,CAAYF,UAAWX,EAAQN,MAAOoB,QAAQ,KAAKC,UAAU,KAAKsI,QAAM,GACrE,aAAa9e,EAAKgd,MAAMzoB,UAAUyL,EAAKgd,MAAM3oB,MAAMkpB,WAK1D7H,EAAAtF,EAAAuF,cAAA,OAAKS,UAAWX,EAAQsJ,OAAQH,aAAW,mBACzClJ,EAAAtF,EAAAuF,cAACqJ,GAAA,EAAD,CAAQC,MAAI,EAACC,eAAe,OAC1BxJ,EAAAtF,EAAAuF,cAACwJ,GAAA,EAAD,CACC3L,KAAMxT,EAAKgd,MAAML,aACjB7e,QAASkC,EAAK0c,cAAa,GAC3B0C,OAAQpf,EAAK0c,cAAa,GAC1BnG,QAAQ,aAEL6G,IAGN1H,EAAAtF,EAAAuF,cAACqJ,GAAA,EAAD,CAAQK,QAAM,EAACH,eAAe,OAC5BxJ,EAAAtF,EAAAuF,cAACwJ,GAAA,EAAD,CACE5I,QAAQ,YACR/C,MAAI,GAEF4J,KAKR1H,EAAAtF,EAAAuF,cAAA,QAAMS,UAAWX,EAAQ6J,SACvB5J,EAAAtF,EAAAuF,cAAA,OAAK4J,MAAQ,CAACC,UAAW,UACzB9J,EAAAtF,EAAAuF,cAACsI,EAAA,EAAD,KACEvI,EAAAtF,EAAAuF,cAACsI,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,WAC5B,OAAO1I,EAAAtF,EAAAuF,cAACsI,EAAA,EAAD,CAAUwB,GAAG,cAEtB/J,EAAAtF,EAAAuF,cAACsI,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,OAAQ,SAAC5I,GAClC,OACEE,EAAAtF,EAAAuF,cAACJ,EAAD,CAAUc,UAAWrW,EAAKgd,MAAMxoB,SAAUiiB,SAAUzW,EAAKgd,MAAMzoB,UAAUyL,EAAKgd,MAAM3oB,+BApIhGqrB,aAuJHC,gBA1NA,SAAApH,GAAK,IAAAqH,EAAA,MAAI,CACtB1I,KAAM,CACJlC,QAAS,OACTwK,UAAW,OACX1K,SAAU,QAEZ0J,UAAW,CACT9F,gBAAiB,QACjBmH,UAAW,QAEbd,OAAOlsB,OAAAitB,EAAA,EAAAjtB,CAAA,GACJ0lB,EAAMwH,YAAYC,GAAG,MAAQ,CAC5BrL,MAAO,IACPsL,WAAY,IAGhBX,QAAS,CACPY,SAAU,EACVC,QAAS5H,EAAMvC,QAAQ,IAEzBoG,WAAY,CACVC,YAAa,GACbC,YAAa,IAEfnH,MAAO,CACLH,QAAS,QACT0C,MAAO,SAGT2F,WAAY,CACV1I,MAAO,KAGTmC,SAAU,CACRnC,MAAO,OACPK,QAAS,eACT+D,UAAW,EACXrE,aAAc,GACd0L,cAAe,OAGjBC,iBAAeT,EAAA,CACbU,YAAa,EACbC,UAAW,GACXJ,QAAS,UAHIttB,OAAAitB,EAAA,EAAAjtB,CAAA+sB,EAIZrH,EAAMwH,YAAYS,KAAK,MAAQ,CAC/BF,YAAa,IALDztB,OAAAitB,EAAA,EAAAjtB,CAAA+sB,EAAA,UAOLrH,EAAMkI,OAAOC,SAPRd,KAiLFD,CAAmBpD,IC7PdoE,QACW,cAA7B/lB,OAAOC,SAAS+lB,UAEe,UAA7BhmB,OAAOC,SAAS+lB,UAEhBhmB,OAAOC,SAAS+lB,SAASC,MACvB,2DCZNC,IAAS1C,OAAO1I,EAAAtF,EAAAuF,cAACoL,GAAD,MAASroB,SAASsoB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5P,KAAK,SAAA6P,GACjCA,EAAaC","file":"static/js/main.55d4ff12.chunk.js","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Dispatcher\n * @flow\n * @preventMunge\n */\n\n\nvar invariant = require('invariant');\n\nexport type DispatchToken = string;\n\nvar _prefix = 'ID_';\n\n/**\n * Dispatcher is used to broadcast payloads to registered callbacks. This is\n * different from generic pub-sub systems in two ways:\n *\n *   1) Callbacks are not subscribed to particular events. Every payload is\n *      dispatched to every registered callback.\n *   2) Callbacks can be deferred in whole or part until other callbacks have\n *      been executed.\n *\n * For example, consider this hypothetical flight destination form, which\n * selects a default city when a country is selected:\n *\n *   var flightDispatcher = new Dispatcher();\n *\n *   // Keeps track of which country is selected\n *   var CountryStore = {country: null};\n *\n *   // Keeps track of which city is selected\n *   var CityStore = {city: null};\n *\n *   // Keeps track of the base flight price of the selected city\n *   var FlightPriceStore = {price: null}\n *\n * When a user changes the selected city, we dispatch the payload:\n *\n *   flightDispatcher.dispatch({\n *     actionType: 'city-update',\n *     selectedCity: 'paris'\n *   });\n *\n * This payload is digested by `CityStore`:\n *\n *   flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'city-update') {\n *       CityStore.city = payload.selectedCity;\n *     }\n *   });\n *\n * When the user selects a country, we dispatch the payload:\n *\n *   flightDispatcher.dispatch({\n *     actionType: 'country-update',\n *     selectedCountry: 'australia'\n *   });\n *\n * This payload is digested by both stores:\n *\n *   CountryStore.dispatchToken = flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'country-update') {\n *       CountryStore.country = payload.selectedCountry;\n *     }\n *   });\n *\n * When the callback to update `CountryStore` is registered, we save a reference\n * to the returned token. Using this token with `waitFor()`, we can guarantee\n * that `CountryStore` is updated before the callback that updates `CityStore`\n * needs to query its data.\n *\n *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'country-update') {\n *       // `CountryStore.country` may not be updated.\n *       flightDispatcher.waitFor([CountryStore.dispatchToken]);\n *       // `CountryStore.country` is now guaranteed to be updated.\n *\n *       // Select the default city for the new country\n *       CityStore.city = getDefaultCityForCountry(CountryStore.country);\n *     }\n *   });\n *\n * The usage of `waitFor()` can be chained, for example:\n *\n *   FlightPriceStore.dispatchToken =\n *     flightDispatcher.register(function(payload) {\n *       switch (payload.actionType) {\n *         case 'country-update':\n *         case 'city-update':\n *           flightDispatcher.waitFor([CityStore.dispatchToken]);\n *           FlightPriceStore.price =\n *             getFlightPriceStore(CountryStore.country, CityStore.city);\n *           break;\n *     }\n *   });\n *\n * The `country-update` payload will be guaranteed to invoke the stores'\n * registered callbacks in order: `CountryStore`, `CityStore`, then\n * `FlightPriceStore`.\n */\nclass Dispatcher<TPayload> {\n  _callbacks: {[key: DispatchToken]: (payload: TPayload) => void};\n  _isDispatching: boolean;\n  _isHandled: {[key: DispatchToken]: boolean};\n  _isPending: {[key: DispatchToken]: boolean};\n  _lastID: number;\n  _pendingPayload: TPayload;\n\n  constructor() {\n    this._callbacks = {};\n    this._isDispatching = false;\n    this._isHandled = {};\n    this._isPending = {};\n    this._lastID = 1;\n  }\n\n  /**\n   * Registers a callback to be invoked with every dispatched payload. Returns\n   * a token that can be used with `waitFor()`.\n   */\n  register(callback: (payload: TPayload) => void): DispatchToken {\n    var id = _prefix + this._lastID++;\n    this._callbacks[id] = callback;\n    return id;\n  }\n\n  /**\n   * Removes a callback based on its token.\n   */\n  unregister(id: DispatchToken): void {\n    invariant(\n      this._callbacks[id],\n      'Dispatcher.unregister(...): `%s` does not map to a registered callback.',\n      id\n    );\n    delete this._callbacks[id];\n  }\n\n  /**\n   * Waits for the callbacks specified to be invoked before continuing execution\n   * of the current callback. This method should only be used by a callback in\n   * response to a dispatched payload.\n   */\n  waitFor(ids: Array<DispatchToken>): void {\n    invariant(\n      this._isDispatching,\n      'Dispatcher.waitFor(...): Must be invoked while dispatching.'\n    );\n    for (var ii = 0; ii < ids.length; ii++) {\n      var id = ids[ii];\n      if (this._isPending[id]) {\n        invariant(\n          this._isHandled[id],\n          'Dispatcher.waitFor(...): Circular dependency detected while ' +\n          'waiting for `%s`.',\n          id\n        );\n        continue;\n      }\n      invariant(\n        this._callbacks[id],\n        'Dispatcher.waitFor(...): `%s` does not map to a registered callback.',\n        id\n      );\n      this._invokeCallback(id);\n    }\n  }\n\n  /**\n   * Dispatches a payload to all registered callbacks.\n   */\n  dispatch(payload: TPayload): void {\n    invariant(\n      !this._isDispatching,\n      'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.'\n    );\n    this._startDispatching(payload);\n    try {\n      for (var id in this._callbacks) {\n        if (this._isPending[id]) {\n          continue;\n        }\n        this._invokeCallback(id);\n      }\n    } finally {\n      this._stopDispatching();\n    }\n  }\n\n  /**\n   * Is this Dispatcher currently dispatching.\n   */\n  isDispatching(): boolean {\n    return this._isDispatching;\n  }\n\n  /**\n   * Call the callback stored with the given id. Also do some internal\n   * bookkeeping.\n   *\n   * @internal\n   */\n  _invokeCallback(id: DispatchToken): void {\n    this._isPending[id] = true;\n    this._callbacks[id](this._pendingPayload);\n    this._isHandled[id] = true;\n  }\n\n  /**\n   * Set up bookkeeping needed when dispatching.\n   *\n   * @internal\n   */\n  _startDispatching(payload: TPayload): void {\n    for (var id in this._callbacks) {\n      this._isPending[id] = false;\n      this._isHandled[id] = false;\n    }\n    this._pendingPayload = payload;\n    this._isDispatching = true;\n  }\n\n  /**\n   * Clear bookkeeping used for dispatching.\n   *\n   * @internal\n   */\n  _stopDispatching(): void {\n    delete this._pendingPayload;\n    this._isDispatching = false;\n  }\n}\n\nexport default Dispatcher;\n","// /src/flux/dispatcher.js\n// Description:\n// \"dispatcher.js\"\n// Copyright 2018-2020 NOOXY. All Rights Reserved.\n\nimport Dispatcher from './lib/dispatcher';\n\nfunction generateDispatcher(setState) {\n  let _dispatcher = new Dispatcher();\n  let id1 = _dispatcher.register((payload)=> {\n    if(payload.type === 'updateLang') {\n      setState( { lang: payload.data } );\n    }\n\n    else if(payload.type === 'updateLocalizes') {\n      setState( { localizes: payload.data } );\n    }\n\n    else if(payload.type === 'updateUserMeta') {\n      setState( { UserMeta: payload.data } );\n    }\n  });\n\n  return _dispatcher;\n}\n\nexport default {generateDispatcher: generateDispatcher};\n","// /src/flux/service.js\n// Description:\n// \"service.js\"\n// Copyright 2018-2020 NOOXY. All Rights Reserved.\nimport Constants from './constants.json';\nimport Localizes from './data/localizes.json';\n\nfunction Service(NoService, Dispatcher) {\n  let Services = {\n    NoUser: null\n  };\n\n  let setupOnline = ()=> {\n    try {\n      NoService.createActivitySocket('NoUser', (err, NoUser)=> {\n        Services.NoUser = NoUser;\n        NoUser.call('returnUserMeta', null, (err, meta)=> {\n          this.Actions.updateUserMeta(meta);\n          console.log(JSON.stringify(meta));\n        });\n      });\n    }\n    catch (e) {\n      console.log(e);\n      setTimeout(setupOnline, 15*1000);\n    }\n  };\n\n  this.Actions = {\n    updateLang: (lang)=> {\n      Dispatcher.dispatch({type: 'updateLang', data: lang});\n    },\n    updateLocalizes: (data)=> {\n      Dispatcher.dispatch({type: 'updateLocalizes', data: data});\n    },\n    updateUserMeta: (data)=> {\n      Dispatcher.dispatch({type: 'updateUserMeta', data: data});\n    },\n    log: (data)=> {console.log(data)},\n    logout: ()=> {\n      NoService.logout();\n    }\n  };\n\n  this.start = (next)=> {\n    this.Actions.updateLang('en');\n    this.Actions.updateLocalizes(Localizes);\n    setupOnline();\n  }\n}\n\nexport default Service;\n","// NoService/clients/javascript/NSc.js\n// Description:\n// \"NSc.js\" is a NoNoService framework client.\n// Copyright 2018-2019 NOOXY. All Rights Reserved.\n'use strict';\n\n// const WebSocket = require('ws');\n// const crypto = require('crypto');\n\n// initialization\nString.prototype.replaceAll = function(search, replacement) {\n    var target = this;\n    return target.split(search).join(replacement);\n};\n// initialization end\n\nlet Buf = {\n  alloc : (...args)=> {\n    // return Buffer.alloc.apply(null, args);\n  },\n\n  encode : (...args)=> {\n    // console.log( new TextEncoder('utf-8').encode(args[0]));\n    return new Uint8Array(new TextEncoder('utf-8').encode(args[0]));\n  },\n\n  decode : (...args)=> {\n    return new TextDecoder('utf-8').decode(args[0]);\n  },\n\n  concat : (...args)=> {\n    let len = 0;\n    for(let i in args[0]) {\n      len += args[0][i].length;\n    }\n    let result = new Uint8Array(len);\n    len = 0;\n    for(let i in args[0]) {\n      result.set(args[0][i], len);\n      len += args[0][i].length;\n    }\n    return result;\n  },\n\n  isBuffer : (...args)=> {\n    return args[0] instanceof Uint8Array;\n  }\n}\n\nfunction NSc(targetip, method, targetport) {\n  const setCookie = (cname, cvalue, exdays)=> {\n    console.log(cname, cvalue, exdays);\n    let d = new Date();\n    d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));\n    let expires = \"expires=\"+d.toUTCString();\n    document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n  };\n  const getCookie = (cname)=> {\n      let name = cname + \"=\";\n      let ca = document.cookie.split(';');\n      for(let i = 0; i < ca.length; i++) {\n        let c = ca[i];\n        while (c.charAt(0) === ' ') {\n          c = c.substring(1);\n        }\n        if (c.indexOf(name) === 0) {\n          return c.substring(name.length, c.length);\n        }\n      }\n      return \"\";\n  };\n  const eraseCookie = (name)=> {\n    setCookie(name,\"\",-1);\n  };\n\n  const settings = {\n    verbose: true,\n    debug: false,\n    user: null,\n    secure: true,\n    NSc_files_root: '/',\n    connmethod: 'WebSocketSecure',\n    targetip: '0.0.0.0',\n    targetport: 43581\n  };\n\n  const Constants = {\n    'version': '0.5.0',\n    'NSP_version': '0.5.0',\n    'copyright': 'copyright(c)2018-2019 NOOXY inc.',\n    \"CONNECTION_METHOD_NAME_MAP\": {\n      \"TCP\": \"TCP\",\n      \"WebSocket\": \"WebSocket\",\n      \"WebSocketSecure\": \"WebSocketSecure\",\n      \"Local\": \"Local\",\n      \"TCP/IP\": \"TCP\",\n      \"ws\": \"WebSocket\",\n      \"wss\": \"WebSocketSecure\",\n      \"local\": \"Local\"\n    }\n  }\n\n  let Utils = {\n    getQueryVariable: (variable)=>{\n           var query = window.location.search.substring(1);\n           var vars = query.split(\"&\");\n           for (var i=0;i<vars.length;i++) {\n                   var pair = vars[i].split(\"=\");\n                   if(pair[0] == variable){return pair[1];}\n           }\n           return(false);\n    },\n    Base64toArrayBuffer: (b64str) => {\n      var raw = window.atob(b64str);\n      var rawLength = raw.length;\n      var array = new Uint8Array(new ArrayBuffer(rawLength));\n      for(let i = 0; i < rawLength; i++) {\n        array[i] = raw.charCodeAt(i);\n      }\n      return array;\n    },\n    convertPemToBinary: (pem)=> {\n      var lines = pem.split('\\n');\n      var encoded = '';\n      for (var i = 0; i < lines.length; i++) {\n        if (lines[i].trim().length > 0 &&\n          lines[i].indexOf('-----BEGIN RSA PRIVATE KEY-----') < 0 &&\n          lines[i].indexOf('-----BEGIN RSA PUBLIC KEY-----') < 0 &&\n          lines[i].indexOf('-----BEGIN PUBLIC KEY-----') < 0 &&\n          lines[i].indexOf('-----END PUBLIC KEY-----') < 0 &&\n          lines[i].indexOf('-----BEGIN PRIVATE KEY-----') < 0 &&\n          lines[i].indexOf('-----END PRIVATE KEY-----') < 0 &&\n          lines[i].indexOf('-----END RSA PRIVATE KEY-----') < 0 &&\n          lines[i].indexOf('-----END RSA PUBLIC KEY-----') < 0) {\n          encoded += lines[i].trim();\n        }\n      }\n      return Utils.Base64toArrayBuffer(encoded)\n    },\n    ArrayBuffertoBase64: (buffer)=> {\n      var binary = '';\n      var bytes = new Uint8Array(buffer);\n      var len = bytes.byteLength;\n      for (var i = 0; i < len; i++) {\n        binary += String.fromCharCode( bytes[ i ] );\n      }\n      return window.btoa( binary );\n    },\n    printLOGO: (version, copyright) => {\n      console.log('88b 88  dP\\'Yb   dP\\'Yb  Yb  dP Yb  dP  TM')\n      console.log('88Yb88 dP   Yb dP   Yb  YbdP   YbdP  ')\n      console.log('88 Y88 Yb   dP Yb   dP  dPYb    88   ')\n      console.log('88  Y8  YbodP   YbodP  dP  Yb   88   NoService framework. ')\n      console.log('')\n      console.log('')\n      console.log('ver. '+version+'. '+copyright)\n      console.log('For more information or update -> www.nooxy.org')\n      console.log('')\n    },\n    TagLog: (tag, logstring) => {\n      if(typeof(logstring)!='string') {\n        logstring = JSON.stringify(logstring, null, 2);\n      }\n      let _space = 10;\n      tag = tag.substring(0, _space);\n      for(var i=0; i < _space-tag.length; i++) {\n        if(i%2 != 1) {\n          tag = tag + ' ';\n        }\n        else {\n          tag = ' ' + tag;\n        }\n      }\n      console.log('['+tag+'] '+logstring.replaceAll('\\n', '\\n['+tag+'] '));\n    },\n    generateUniqueId: () => {\n      return '_' + Math.random().toString(36).substr(2, 9);\n    },\n    generateGUID: () => {\n      let s4 = () => {\n        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      }\n      return s4() + s4() + '-' + s4() + '-' + s4() + '-' +s4() + '-' + s4() + s4() +\n       s4();\n    },\n    searchObject: (object, value)=> {\n      for (let prop in object) {\n        if (object.hasOwnProperty(prop)) {\n          if (object[prop] === value) {\n            return prop;\n          }\n        }\n      }\n    },\n  }\n\n  // NoService Modules\n\n  let Connections = {\n    WebSocket: {\n      Client: function (ConnectionProfile) {\n        let _ws = null;\n        let _debug;\n\n        this.setDebug = (d)=> {\n          _debug = d;\n        };\n\n        this.closeConnetion = () => {\n          _ws.close();\n        };\n\n        this.onData = (connprofile, data) => {Utils.TagLog('*ERR*', 'onData not implemented');};\n\n        this.onClose = () => {Utils.TagLog('*ERR*', 'onClose not implemented');};\n\n        this.send = (connprofile, data)=> {\n          _ws.send(data);\n        };\n\n        this.connect = (ip, port, callback) => {\n          let connprofile;\n          _ws = new WebSocket('ws://'+ip+':'+port);\n          _ws.binaryType = \"arraybuffer\";\n          connprofile = new ConnectionProfile(null, 'Server', 'WebSocket', ip, port, 'localhost', this);\n          _ws.onopen = ()=> {\n            callback(false, connprofile);\n            // ws.send('something');\n          };\n          _ws.onmessage = (event) => {\n            this.onData(connprofile, new Uint8Array(event.data));\n          };\n\n          _ws.onerror = (error) => {\n            if(_debug) {\n              Utils.TagLog('*WARN*', 'An error occured on connection module.');\n              Utils.TagLog('*WARN*', error);\n            }\n            _ws.close();\n            this.onClose(connprofile);\n          };\n\n          _ws.onclose = (error) => {\n              this.onClose(connprofile);\n          };\n\n        }\n      }\n    },\n    WebSocketSecure: {\n      Client: function (ConnectionProfile) {\n        let _ws = null;\n        let _debug;\n\n        this.setDebug = (d)=> {\n          _debug = d;\n        };\n\n        this.closeConnetion = () => {\n          _ws.close();\n        };\n\n        this.onData = (connprofile, data) => {Utils.TagLog('*ERR*', 'onData not implemented');};\n\n        this.onClose = () => {Utils.TagLog('*ERR*', 'onClose not implemented');};\n\n        this.send = (connprofile, data)=> {\n          _ws.send(data);\n        };\n\n        this.connect = (ip, port, callback) => {\n          let connprofile;\n          _ws = new WebSocket('wss://'+ip+':'+port);\n          _ws.binaryType = \"arraybuffer\";\n          connprofile = new ConnectionProfile(null, 'Server', 'WebSocketSecure', ip, port, 'localhost', this);\n          _ws.onopen = ()=> {\n            callback(false, connprofile);\n            // ws.send('something');\n          };\n          _ws.onmessage = (event) => {\n            this.onData(connprofile, new Uint8Array(event.data));\n          };\n\n          _ws.onerror = (error) => {\n            if(_debug) {\n              Utils.TagLog('*WARN*', 'An error occured on connection module.');\n              Utils.TagLog('*WARN*', error);\n            }\n            _ws.close();\n            this.onClose(connprofile);\n          };\n\n          _ws.onclose = (error) => {\n              this.onClose(connprofile);\n          };\n        }\n      }\n    }\n  }\n\n  function Connection(options) {\n    if(options.allow_ssl_self_signed)\n      process.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\n\n    let _default_local_ip_and_port = '';\n    let _servers = {};\n    let _clients = {};\n    let _have_local_server = false;\n    let _blocked_ip = [];\n    let ssl_priv_key;\n    let ssl_cert;\n    let uint16_heartbeat_phrase = Buf.encode('HB');\n    let heartbeat_cycle = 60000;\n    let _debug = false;\n    let _conn_meth_name_map;\n\n    // define an profile of an connection\n    function ConnectionProfile(serverId, Rpos, connMethod, hostip, hostport, clientip, conn) {\n      let _serverId = serverId;\n      let _pos = Rpos;\n      let _connMethod = connMethod;\n      let _bundle = {};\n      let _GUID = Utils.generateGUID();\n      let _hostip = hostip;\n      let _hostport = hostport;\n      let _clientip = clientip;\n      let _conn = conn; // conn is wrapped!\n\n      if(Rpos === 'Server') {\n        _clients[connMethod+hostip+hostport] = this;\n      }\n\n      this.closeConnetion = () => {\n        if(Rpos === 'Server') {\n          delete _clients[connMethod+hostip+hostport];\n        }\n        // Utils.TagLog('*ERR*', 'closeConnetion not implemented. Of '+this.type);\n        _conn.closeConnetion(_GUID);\n      };\n\n      this.getServerId = (callback) => {callback(false, _serverId);}\n      this.getHostIP = (callback) => {callback(false, _hostip);}\n      this.getHostPort = (callback) => {callback(false, _hostport);}\n      this.getClientIP = (callback) => {callback(false, _clientip);}\n      this.getConnMethod = (callback) => {callback(false, _connMethod);}\n      this.getRemotePosition = (callback) => {callback(false, _pos);}\n      this.setBundle = (key, value) => {_bundle[key] = value;}\n      this.getBundle = (key, callback) => {callback(false, _bundle[key]);}\n      this.getConn = (callback) => {callback(false, _conn)};\n      this.getGUID = (callback) => {callback(false, _GUID)};\n\n      this.returnServerId = () => {return _serverId;}\n      this.returnHostIP = () => {return _hostip;}\n      this.returnHostPort = () => {return _hostport;}\n      this.returnClientIP = () => {return _clientip;}\n      this.returnConnMethod = () => {return _connMethod;}\n      this.returnRemotePosition = () => {return _pos;}\n      this.returnBundle = (key) => {return _bundle[key];}\n      this.returnConn = () => {return _conn;};\n      this.returnGUID = () => {return _GUID};\n\n      this.destroy= () => {\n        // for worker deletetion\n        this.worker_cancel_refer = true;\n        delete _clients[_GUID];\n      };\n      // this.onConnectionDropout = () => {\n      //   Utils.TagLog('*ERR*', 'onConnectionDropout not implemented');\n      // }\n\n    }\n\n    this.addServer = (conn_method, ip, port) => {\n\n      if(conn_method === 'local'||conn_method =='Local') {\n        if(_have_local_server === false) {\n          let _serverId = \"LOCAL\";\n          let server = new Connections.Local.Server(_serverId, ConnectionProfile);\n          _servers[_serverId] = server;\n          server.start('LOCALIP', 'LOCALPORT');\n          server.onData = this.onData;\n          server.onClose = this.onClose;\n          _have_local_server = true;\n        }\n        else {\n          Utils.TagLog('*ERR*', 'Can only exist one local server.');\n        }\n      }\n      else if(_conn_meth_name_map[conn_method]) {\n        let _serverId = Utils.generateUniqueId();\n        let server = new Connections[_conn_meth_name_map[conn_method]].Server(_serverId, ConnectionProfile, ssl_priv_key, ssl_cert);\n        _servers[_serverId] = server;\n        server.start(ip, port);\n        server.onData = this.onData;\n        server.onClose = this.onClose;\n      }\n      else {\n        Utils.TagLog('*ERR*', 'ConnMethod '+conn_method+' not implemented. Skipped.');\n      }\n\n      // Heartbeat\n      if(Object.keys(_servers).length==1) {\n        setInterval(()=>{\n          for(let i in _servers) {\n            try{\n              _servers[i].broadcast(uint16_heartbeat_phrase);\n            }\n            catch(e) {\n              if(_debug) {\n                Utils.TagLog('*WARN*', 'Server '+i+' occured error on heartbeat. Skipped.');\n              }\n            }\n          };\n        }, heartbeat_cycle);\n      };\n    }\n\n    this.createClient = (conn_method, remoteip, port, callback) => {\n      // Heartbeat\n      let onData_wrapped = (connprofile, data)=> {\n        if(data.length!=uint16_heartbeat_phrase.length||data[0]!=uint16_heartbeat_phrase[0]||data[1]!=uint16_heartbeat_phrase[1]) {\n          this.onData(connprofile, data);\n        }\n        else {\n        }\n      };\n\n      let _prev_client = _clients[conn_method+remoteip+port];\n\n      if(_prev_client) {\n        callback(false, _prev_client);\n      }\n      else if(conn_method === 'local'||conn_method =='Local') {\n        if(_have_local_server === false) {\n          Utils.TagLog('*ERR*', 'Local server not started.');\n        }\n        else {\n          let locc = new Connections.Local.Client(ConnectionProfile);\n          locc.setDebug(_debug);\n          locc.onData = onData_wrapped;\n          locc.onClose = this.onClose;\n          locc.connect('LOCALIP', 'LOCALPORT', callback);\n        }\n      }\n\n      else if(_conn_meth_name_map[conn_method]) {\n        let netc = new Connections[_conn_meth_name_map[conn_method]].Client(ConnectionProfile);\n        netc.setDebug(_debug);\n        netc.onData = onData_wrapped;\n        netc.onClose = this.onClose;\n        netc.connect(remoteip, port, callback);\n      }\n\n      else {\n        Utils.TagLog('*ERR*', 'ConnMethod '+conn_method+' not implemented. Skipped.');\n      }\n    };\n\n    this.addConnetionModule = (constructor)=> {\n      Connections[constructor.ConnectMethod] = constructor;\n    };\n\n    this.send = (connprofile, data) => {\n      try {\n        connprofile.getConn((err, conn) => {\n          conn.send(connprofile, data);\n        });\n      }\n      catch (e) {\n        if(_debug) {\n          Utils.TagLog('*WARN*', 'Error occured while sending Data.');\n          console.log(e);\n        }\n      }\n    };\n\n    this.broadcast = (data) => {\n      try {\n        _servers.forEach((key, server) => {\n          server.broadcast(data);\n        });\n      }\n      catch (e) {\n        if(_debug) {\n          Utils.TagLog('*WARN*', 'Error occured while broadcasting Data.');\n          console.log(e);\n        }\n      }\n    };\n\n    this.onData = (conn_profile, data) => {\n      Utils.TagLog('*ERR*', 'Connection module onData not implement');\n    };\n\n    this.onClose = (connprofile) => {\n      Utils.TagLog('*ERR*', 'Connection module onClose not implement');\n    }\n\n    this.getServers = (callback) => {\n      callback(false, _servers);\n    };\n\n    this.getClients = (callback) => {\n      callback(false, _clients);\n    };\n\n    this.killClient = (conn_profile) => {\n\n    };\n\n    this.setDebug = (bool) => {\n      _debug = bool;\n    };\n\n    this.importSSLCert = (ssl_cert_in) => {\n      ssl_cert = ssl_cert_in;\n    };\n\n    this.importSSLPrivateKey = (ssl_priv_key_in) => {\n      ssl_priv_key = ssl_priv_key_in;\n    }\n\n    this.importHeartBeatCycle = (cycle) => {\n      heartbeat_cycle = cycle;\n    };\n\n    this.importConnectionMethodNameMap = (dict)=> {\n      _conn_meth_name_map = dict;\n    };\n\n    this.close = () =>{\n      this.onClose = (connprofile) => {\n        Utils.TagLog('*ERR*', 'Connection module onClose not implement');\n      };\n      this.onData = (conn_profile, data) => {\n        Utils.TagLog('*ERR*', 'Connection module onData not implement');\n      };\n      for(let i in _clients) {\n        _clients[i].closeConnetion();\n      }\n      for(let i in _servers) {\n        _servers[i].close();\n      }\n    }\n  }\n\n  let Protocols = [\n    function Protocol(coregateway, emitRequest) {\n\n      this.Protocol = \"AU\";\n\n      this.Positions = {\n        rq: \"Server\",\n        rs: \"Client\"\n      };\n\n      let Implementation = coregateway.Implementation;\n      let Entity = coregateway.Entity;\n      let Utils = coregateway.Utilities;\n      let AuthorizationHandler = coregateway.AuthorizationHandler;\n\n\n      let _queue_operation = {};\n      let _auth_timeout = 180;\n\n      // ClientSide\n\n      let _handler = {\n        // Authby password\n        'PW': (connprofile, data, emitResponse) => {\n          AuthorizationHandler.AuthbyPassword(connprofile, data, emitResponse);\n        },\n\n        // Authby password failed\n        'PF': (connprofile, data, emitResponse) => {\n          AuthorizationHandler.AuthbyPasswordFailed(connprofile, data, emitResponse);\n        },\n\n        // Authby token\n        'TK': (connprofile, data, emitResponse) => {\n          AuthorizationHandler.AuthbyToken(connprofile, data, emitResponse);\n        },\n\n        // Authby token failed\n        'TF': (connprofile, data, emitResponse) => {\n          AuthorizationHandler.AuthbyTokenFailed(connprofile, data, emitResponse);\n        },\n\n        // Sign in\n        'SI': (connprofile, data, emitResponse) => {\n          AuthorizationHandler.Signin(connprofile, data, emitResponse);\n        },\n\n        'AF': ()=>{\n\n        }\n      };\n\n\n      this.RequestHandler = (connprofile, blob, emitResponse) => {\n        let data = JSON.parse(Buf.decode(blob));\n        let _emitResponse = (connprofile, data)=> {\n          emitResponse(connprofile, Buf.encode(JSON.stringify(data)));\n        };\n        _handler[data.m](connprofile, data, _emitResponse);\n      };\n    }\n    ,\n    function Protocol(coregateway, emitRequest) {\n      this.Protocol = \"CS\";\n\n      this.Positions = {\n        rq: \"Client\",\n        rs: \"Server\"\n      };\n\n      let Activity = coregateway.Activity;\n      let Utils = coregateway.Utilities;\n\n      let _ActivityRsCEcallbacks = {};\n\n      let _to_blob = (data)=> {\n        if(Buf.isBuffer(data.d.d)) {\n          let blob_back = Buf.concat([data.d.d]);\n          data.d.d = null;\n          let blob_front = Buf.encode(JSON.stringify(data));\n          return Buf.concat([Buf.encode(('0000000000000000'+blob_front.length).slice(-16)), blob_front, Buf.encode(('0000000000000000'+blob_back.length).slice(-16)), blob_back]);\n        }\n        else {\n          let blob = Buf.encode(JSON.stringify(data));\n          return Buf.concat([Buf.encode(('0000000000000000'+blob.length).slice(-16)), blob]);\n        }\n      };\n\n      let _parse_blob = (blob)=> {\n        let length = parseInt(Buf.decode(blob.slice(0, 16)));\n        let json_data = JSON.parse(Buf.decode(blob.slice(16, 16+length)));\n        blob = blob.slice(16+length);\n        if(blob.length) {\n          let blob_data;\n          length = parseInt(Buf.decode(blob.slice(0, 16)));\n          blob_data = blob.slice(16, 16+length);\n          json_data.d.d = blob_data;\n          return json_data;\n        }\n        else {\n          return json_data;\n        }\n      };\n\n\n      Activity.on('createActivitySocketRq', (method, targetport, owner, mode, service, targetip, daemon_authkey, callback)=> {\n        let err = false;\n        let _data = {\n          \"m\": \"CE\",\n          \"d\": {\n            t: Utils.generateGUID(),\n            o: owner,\n            m: mode,\n            s: service,\n            od: targetip,\n            k: daemon_authkey\n          }\n        };\n        coregateway.Connection.createClient(method, targetip, targetport, (err, connprofile) => {\n          _ActivityRsCEcallbacks[_data.d.t] = (connprofile, data) => {\n            callback(false, connprofile, data.d.i);\n          }\n          emitRequest(connprofile, 'CS', _to_blob(_data));\n        });\n\n      });\n\n      Activity.on('EmitSSBlobServiceFunctionRq', (conn_profile, entityId, name, data, meta, tempid) => {\n          let _data = {\n            \"m\": \"BS\",\n            \"d\": {\n              \"i\": entityId,\n              \"n\": name,\n              \"t\": tempid,\n              \"d\": data,\n              \"m\": meta\n            }\n          };\n          emitRequest(conn_profile, 'CS', _to_blob(_data));\n\n      });\n\n      Activity.on('EmitSSDataRq', (conn_profile, entityId, d) => {\n          let _data = {\n            \"m\": \"SS\",\n            \"d\": {\n              \"i\": entityId,\n              \"d\": d,\n            }\n          };\n          emitRequest(conn_profile, 'CS', _to_blob(_data));\n\n      });\n\n      Activity.on('EmitSSServiceFunctionRq', (conn_profile, entityId, name, data, tempid) => {\n          let _data = {\n            \"m\": \"SF\",\n            \"d\": {\n              \"i\": entityId,\n              \"n\": name,\n              \"t\": tempid,\n              \"d\": data\n            }\n          };\n          emitRequest(conn_profile, 'CS', _to_blob(_data));\n\n      });\n\n      Activity.on('EmitASCloseRq', (conn_profile, entityId) => {\n          let _data = {\n            \"m\": \"CS\",\n            \"d\": {\n              \"i\": entityId\n            }\n          };\n          emitRequest(conn_profile, 'CS', _to_blob(_data));\n      });\n\n\n      // client\n      this.ResponseHandler = (connprofile, blob) => {\n        let data = _parse_blob(blob);\n        let methods = {\n          // nooxy service protocol implementation of \"Call Service: Vertify Connection\"\n          VE: (connprofile, data) => {\n            if(data.d.s === 'OK') {\n              Activity.launchActivitySocketByEntityId(data.d.i);\n\n            }\n            else {\n              Activity.emitASClose(data.d.i);\n\n            }\n          },\n          // nooxy service protocol implementation of \"Call Service: ServiceSocket\"\n          SS: (connprofile, data) => {\n\n          },\n          // nooxy service protocol implementation of \"Call Service: Blob ServiceFunction\"\n          BS: (connprofile, data) => {\n            if(data.d.s === 'OK') {\n              Activity.emitBSFReturn(data.d.i, false, data.d.t, data.d.d, data.d.m);\n            }\n            else {\n              Activity.emitBSFReturn(data.d.i, true, data.d.t, data.d.d, data.d.m);\n            }\n          },\n          // nooxy service protocol implementation of \"Call Service: ServiceFunction\"\n          SF: (connprofile, data) => {\n            if(data.d.s === 'OK') {\n              Activity.emitSFReturn(data.d.i, false, data.d.t, data.d.d);\n            }\n            else {\n              Activity.emitSFReturn(data.d.i, true, data.d.t, data.d.d);\n            }\n          },\n          // nooxy service protocol implementation of \"Call Service: createEntity\"\n          CE: (connprofile, data) => {\n            // tell server finish create\n            if(data.d.i != null) {\n              // create a description of this service entity.\n              _ActivityRsCEcallbacks[data.d.t](connprofile, data);\n              let _data = {\n                \"m\": \"VE\",\n                \"d\": {\n                  \"i\": data.d.i,\n                }\n              };\n\n              emitRequest(connprofile, 'CS', _to_blob(_data));\n            }\n            else {\n              _ActivityRsCEcallbacks[data.d.t](connprofile, data);\n              delete  _ActivityRsCEcallbacks[data.d.t];\n            }\n          }\n        }\n\n        // call the callback.\n        methods[data.m](connprofile, data);\n      };\n    }\n    ,\n    function Protocol(coregateway, emitRequest) {\n      this.Protocol = \"GT\";\n\n      this.Positions = {\n        rq: \"Client\",\n        rs: \"Server\"\n      };\n\n      this.ResponseHandler = (connprofile, blob) => {\n        let data = JSON.parse(Buf.decode(blob));\n        if(data.s === 'OK') {\n          coregateway.Implementation.onToken(connprofile, false, data.u, data.t);\n        }\n        else {\n          coregateway.Implementation.onToken(connprofile, true, data.u, data.t);\n        }\n      };\n    }\n    ,\n    function Protocol(coregateway, emitRequest) {\n      this.Protocol = \"CA\";\n      this.Positions = {\n        rq: \"Server\",\n        rs: \"Client\"\n      };\n\n      let Activity = coregateway.Activity;\n\n      let _to_blob = (data)=> {\n        if(Buf.isBuffer(data.d.d)) {\n          let blob_back = Buf.concat([data.d.d]);\n          data.d.d = null;\n          let blob_front = Buf.encode(JSON.stringify(data));\n          return Buf.concat([Buf.encode(('0000000000000000'+blob_front.length).slice(-16)), blob_front, Buf.encode(('0000000000000000'+blob_back.length).slice(-16)), blob_back]);\n        }\n        else {\n          let blob = Buf.encode(JSON.stringify(data));\n          return Buf.concat([Buf.encode(('0000000000000000'+blob.length).slice(-16)), blob]);\n        }\n      };\n\n      let _parse_blob = (blob)=> {\n        let length = parseInt(Buf.decode(blob.slice(0, 16)));\n        let json_data = JSON.parse(Buf.decode(blob.slice(16, 16+length)));\n        blob = blob.slice(16+length);\n        if(blob.length) {\n          let blob_data;\n          length = parseInt(Buf.decode(blob.slice(0, 16)));\n          blob_data = blob.slice(16, 16+length);\n          json_data.d.d = blob_data;\n          return json_data;\n        }\n        else {\n          return json_data;\n        }\n      };\n\n      this.RequestHandler = (connprofile, blob, emitResponse) => {\n        let data = _parse_blob(blob);\n\n        let methods = {\n          // nooxy service protocol implementation of \"Call Activity: ActivitySocket\"\n          AS: () => {\n            Activity.emitASData(data.d.i, data.d.d);\n            let _data = {\n              \"m\": \"AS\",\n              \"d\": {\n                // status\n                \"i\": data.d.i,\n                \"s\": \"OK\"\n              }\n            };\n            emitResponse(connprofile, Buf.encode(JSON.stringify(_data)));\n          },\n          // nooxy service protocol implementation of \"Call Activity: Blob Event(with metadata)\"\n          BE: () => {\n            Activity.emitASBlobEvent(data.d.i, data.d.n, data.d.d, data.d.m);\n            let _data = {\n              \"m\": \"BE\",\n              \"d\": {\n                // status\n                \"i\": data.d.i,\n                \"s\": \"OK\"\n              }\n            };\n            emitResponse(connprofile, Buf.encode(JSON.stringify(_data)));\n          },\n          // nooxy service protocol implementation of \"Call Activity: Event\"\n          EV: () => {\n            Activity.emitASEvent(data.d.i, data.d.n, data.d.d);\n            let _data = {\n              \"m\": \"EV\",\n              \"d\": {\n                // status\n                \"i\": data.d.i,\n                \"s\": \"OK\"\n              }\n            };\n            emitResponse(connprofile, Buf.encode(JSON.stringify(_data)));\n          },\n          // nooxy service protocol implementation of \"Call Activity: Close ActivitySocket\"\n          CS: () => {\n            Activity.emitASClose(data.d.i);\n          }\n        }\n        // call the callback.\n        methods[data.m](connprofile, data.d, emitResponse);\n      };\n    }\n  ];\n\n  function Router() {\n    let _coregateway;\n    // nooxy service protocol secure\n    let _json_sniffers = [];\n    let _raw_sniffers = [];\n    // for signup timeout\n    let _locked_ip = [];\n    let _debug = false;\n\n    let _tellJSONSniffers = (Json) => {\n      for(let i in _json_sniffers) {\n        _json_sniffers[i](false, Json);\n      }\n    };\n\n    let _tellRAWSniffers = (data) => {\n      for(let i in _raw_sniffers) {\n        _raw_sniffers[i](false, data);\n      }\n    };\n\n    // in case of wrong session of the position\n    let _sessionnotsupport = (protocol, session, data) => {\n      if(_debug) {\n        Utils.TagLog('*WARN*', 'session not support');\n        Utils.TagLog('*WARN*', protocol);\n        Utils.TagLog('*WARN*', session);\n        Utils.TagLog('*WARN*', data);\n      }\n    }\n\n    // a convinient function fo sending data\n    let _senddata = (connprofile, method, session, blob) => {\n      let blobfinal = Buf.concat([Buf.encode(method+session, 'utf8'), blob]);\n      // finally sent the data through the connection.\n      if(connprofile) {\n        _coregateway.NSPS.isConnectionSecured(connprofile, (secured)=> {\n          if(secured === true) {\n            _coregateway.NSPS.encrypt(connprofile, blobfinal, (err, encrypted)=> {\n              if(!err) {\n                _coregateway.Connection.send(connprofile, encrypted);\n              }\n              else if(_debug) {\n                console.log(err);\n                Utils.TagLog('*WARN*', err.stack);\n              }\n            });\n          }\n          else {\n            _coregateway.Connection.send(connprofile, blobfinal);\n          }\n        });\n      }\n    }\n\n    // implementations of NOOXY Service Protocol methods\n    let methods = {\n\n    }\n\n    this.addJSONSniffer = (callback) => {\n      _json_sniffers.push(callback);\n    };\n\n    this.addRAWSniffer = (callback) => {\n      _raw_sniffers.push(callback);\n    };\n\n    // emit specified method.\n    this.emitRequest = (connprofile, method, blob) => {\n      methods[method].emitRequest(connprofile, blob);\n    };\n\n    // import the accessbility of core resource\n    this.importCore = (coregateway) => {\n      _coregateway = coregateway;\n      _debug = _coregateway.Settings.debug;\n\n      // while recieve a data from connection\n      _coregateway.Connection.onData = (connprofile, data) => {\n        _tellRAWSniffers(data);\n        try {\n          if(_coregateway.Settings.secure === true && connprofile.returnConnMethod() != 'Local' && connprofile.returnConnMethod() != 'local') {\n            // upgrade protocol\n            _coregateway.NSPS.decrypt(connprofile, data, (err, decrypted)=> {\n              if(err&&_coregateway.Settings.debug) {\n                console.log(err);\n              }\n              let method = Buf.decode(decrypted.slice(0, 2));\n              let session = Buf.decode(decrypted.slice(2, 4));\n              let blob = decrypted.slice(4);\n              _tellJSONSniffers({method: method, session: session, data: Buf.decode(blob)});\n              methods[method].RequestHandler(connprofile, session, blob);\n            });\n          }\n          else {\n            let method = Buf.decode(data.slice(0, 2));\n            let session = Buf.decode(data.slice(2, 4));\n            let blob = data.slice(4);\n\n            _tellJSONSniffers({method: method, session: session, data: Buf.decode(blob)});\n            methods[method].RequestHandler(connprofile, session, blob);\n          }\n        }\n        catch (er) {\n          if(_debug) {\n            Utils.TagLog('*ERR*', 'An error occured in router module.');\n            console.log(er);\n          }\n        }\n      };\n\n      _coregateway.Connection.onClose = (connprofile) => {\n        try {\n          if(connprofile.returnRemotePosition() === 'Client') {\n            _coregateway.Service.emitConnectionClose(connprofile, (err)=>{\n              connprofile.destroy();\n            });\n          }\n          else {\n            _coregateway.Activity.emitConnectionClose(connprofile, (err)=>{\n              connprofile.destroy();\n            });\n          }\n\n        }\n        catch (er) {\n          if(_debug) {\n            Utils.TagLog('*WARN*', 'An error occured in router module.');\n            console.log(er);\n          }\n        }\n      };\n\n      // load protocols\n      Protocols.forEach((pt)=> {\n        let p = new pt(_coregateway, this.emitRequest, _debug);\n        methods[p.Protocol] = {\n          emitRequest : (connprofile, data) => {\n            _senddata(connprofile, p.Protocol, 'rq', data);\n          },\n\n          RequestHandler : (connprofile, session, data) => {\n            connprofile.getRemotePosition((err, pos)=> {\n              if(p.Positions[session] === pos || p.Positions[session] === 'Both') {\n                let _emitResponse = (connprofile, data)=> {\n                  _senddata(connprofile,  p.Protocol, 'rs', data);\n                };\n                if(session === 'rq') {\n                  p.RequestHandler(connprofile, data, _emitResponse);\n                }\n                else {\n                  p.ResponseHandler(connprofile, data);\n                }\n              }\n              else {\n                _sessionnotsupport(p, session, data);\n              }\n            });\n          }\n        };\n      });\n\n      _coregateway.Implementation.getClientConnProfile = _coregateway.Connection.createClient;\n      _coregateway.Implementation.emitRequest = (connprofile, method, json)=> {this.emitRequest(connprofile, method, Buf.encode(JSON.stringify(json)))};\n      _coregateway.Implementation.sendRouterData = _senddata;\n      _coregateway.NSPS.sendRouterData = _senddata;\n    };\n\n    // for plugins\n    this.addProtocol = (pt)=> {\n      if(_debug) {\n        Utils.TagLog('Router', 'Added a additional protocol.');\n      }\n      Protocols.push(pt);\n    };\n\n    this.close = () => {\n      _coregateway = null;\n      _json_sniffers = [];\n      _raw_sniffers = [];\n      _locked_ip = [];\n    };\n\n  }\n\n  let SocketPair = {\n    ActivitySocket: function ActivitySocket(service_name, conn_profile, emitter, unbindActivitySocketList, debug) {\n      // Service Socket callback\n      let _emitdata = emitter.Data;\n\n      let _emit_sfunc = emitter.ServiceFunction;\n\n      let _emit_blob_sfunc = emitter.BlobServiceFunction;\n\n      let _emitclose = emitter.Close;\n\n      let _entity_id;\n      let _launched = false;\n\n      let wait_ops = [];\n      let wait_launch_ops = [];\n\n      let _sfqueue = {};\n      let _bsfqueue = {};\n\n      let _on_dict = {\n        data: ()=> {\n          if(debug) Utils.TagLog('*WARN*', 'ActivitySocket of service \"'+service_name+'\" on \"data\" not implemented')\n        },\n        close: ()=> {\n          if(debug) Utils.TagLog('*WARN*', 'ActivitySocket of service \"'+service_name+'\" on \"close\" not implemented')\n        }\n      };\n\n      let _on_event = {\n\n      };\n\n      let _on_blob_event = {\n\n      };\n\n      // For waiting connection is absolutly established. We need to wrap operations and make it queued.\n      let exec = (callback) => {\n        if(_launched != false) {\n          callback();\n        }\n        else {\n          wait_ops.push(callback);\n        }\n      };\n\n      this.launch = () => {\n        _launched = true;\n        for(let i in wait_ops) {\n          wait_ops[i]();\n        }\n      };\n\n      this.setEntityId = (id) => {\n        _entity_id = id;\n        let entities_prev = conn_profile.returnBundle('bundle_entities');\n        if(entities_prev != null) {\n          conn_profile.setBundle('bundle_entities', [_entity_id].concat(entities_prev));\n        }\n        else {\n          conn_profile.setBundle('bundle_entities', [_entity_id]);\n        }\n      };\n\n      // ServiceFunction call\n      this.call = (name, data, callback) => {\n        let op = ()=> {\n          let tempid = Utils.generateUniqueId();\n          _sfqueue[tempid] = (err, returnvalue) => {\n            callback(err, returnvalue);\n          };\n          _emit_sfunc(conn_profile, _entity_id, name, data, tempid);\n        };\n        exec(op);\n      }\n\n      // BlobServiceFunction call\n      this.callBlob = (name, blob, meta, callback) => {\n        let op = ()=> {\n          let tempid = Utils.generateUniqueId();\n          _bsfqueue[tempid] = (err, returnblob, meta) => {\n            callback(err, returnblob, meta);\n          };\n          _emit_blob_sfunc(conn_profile, _entity_id, name, blob, meta, tempid);\n        };\n        exec(op);\n      }\n\n      this.getEntityId = (callback) => {\n        callback(false, _entity_id);\n      };\n\n      this.sendData = (data) => {\n        let op = ()=> {\n          _emitdata(conn_profile, _entity_id, data);\n        };\n        exec(op);\n      };\n\n      this.on = (type, callback)=> {\n        _on_dict[type] = callback;\n      };\n\n      this.onEvent = (event, callback)=> {\n        _on_event[event] = callback;\n      };\n\n      this.onBlobEvent = (event, callback)=> {\n        _on_blob_event[event] = callback;\n      };\n\n      this._emitData = (data) => {\n        _on_dict['data'](false, data);\n      };\n\n      this._emitBlobEvent = (event, blob, meta)=> {\n        if(_on_blob_event[event])\n          _on_blob_event[event](false, blob, meta);\n      };\n\n      this._emitSFReturn = (err, tempid, returnvalue) => {\n        if(err) {\n          _sfqueue[tempid](err);\n        }\n        else {\n          _sfqueue[tempid](err, returnvalue);\n        }\n        delete _sfqueue[tempid];\n      };\n\n      this._emitBSFReturn = (err, tempid, returnblob, meta) => {\n        if(err) {\n          _bsfqueue[tempid](err);\n        }\n        else {\n          _bsfqueue[tempid](err, returnblob, meta);\n        }\n        delete _bsfqueue[tempid];\n      };\n\n      this._emitEvent = (event, data)=> {\n        if(_on_event[event])\n          _on_event[event](false, data);\n      };\n\n      this._emitClose = () => {\n        _on_dict['close'](false);\n      };\n\n      this.remoteClosed = false;\n\n      this.unbindActivitySocketList = ()=> {\n        Utils.TagLog('*ERR*', '_aftercloseLaunched not implemented');\n      };\n\n      this.close = () => {\n        let op = ()=> {\n          if(!this.remoteClosed)\n            _emitclose(conn_profile, _entity_id);\n          this._emitClose();\n          let bundle = conn_profile.returnBundle('bundle_entities');\n          for (let i=bundle.length-1; i>=0; i--) {\n            if (bundle[i] === _entity_id) {\n              unbindActivitySocketList(_entity_id);\n              bundle.splice(i, 1);\n            }\n          }\n          conn_profile.setBundle('bundle_entities', bundle);\n          if(bundle.length === 0) {\n            conn_profile.closeConnetion();\n          }\n        }\n        exec(op);\n      };\n    }\n  }\n\n\n  function Activity() {\n    let ActivitySocketDestroyTimeout = 1000;\n    let _ASockets = {};\n    let _admin_name = 'admin';\n    let _daemon_auth_key;\n    let _debug = false;\n    let _on_handler = {};\n\n    let _emmiter;\n\n\n\n    let _unbindActivitySocketList = (_entity_id)=> {\n      setTimeout(()=>{\n        // tell worker abort referance\n        if(_ASockets[_entity_id])\n          _ASockets[_entity_id].worker_cancel_refer = true;\n        delete _ASockets[_entity_id];\n      }, ActivitySocketDestroyTimeout);\n    };\n\n    // Service module create activity socket\n    this.createActivitySocket = (method, targetip, targetport, service, owner, callback) => {\n      _emmiter = {\n        Data: _on_handler['EmitSSDataRq'],\n        ServiceFunction: _on_handler['EmitSSServiceFunctionRq'],\n        Close: _on_handler['EmitASCloseRq'],\n      }\n      _on_handler['createActivitySocketRq'](method, targetport, owner, 'normal', service, targetip, false, (err, connprofile, entityId)=> {\n        if(entityId) {\n          let _as = new SocketPair.ActivitySocket(service, connprofile, _emmiter, _unbindActivitySocketList, _debug);\n          _as.setEntityId(entityId);\n          let prev = connprofile.returnBundle();\n          if(!prev) {\n            prev = [];\n          }\n          connprofile.setBundle('bundle_entities', prev.concat(entityId));\n          _ASockets[entityId] = _as;\n          callback(false, _ASockets[entityId]);\n        }\n        else{\n          callback(new Error('Could not create this entity for some reason.'));\n        }\n      });\n    };\n\n    this.createAdminDaemonActivitySocket = (method, targetip, targetport, service, callback) => {\n      this.createDaemonActivitySocket(method, targetip, targetport, service, _admin_name, callback);\n    };\n\n    this.createDaemonActivitySocket = (method, targetip, targetport, service, owner, callback) => {\n      _emmiter = {\n        Data: _on_handler['EmitSSDataRq'],\n        ServiceFunction: _on_handler['EmitSSServiceFunctionRq'],\n        BlobServiceFunction: _on_handler['EmitSSBlobServiceFunctionRq'],\n        Close: _on_handler['EmitASCloseRq'],\n      }\n      _on_handler['createActivitySocketRq'](method, targetport, owner, 'daemon', service, targetip, _daemon_auth_key, (err, connprofile, entityId)=> {\n        if(entityId) {\n          let _as = new SocketPair.ActivitySocket(service, connprofile, _emmiter, _unbindActivitySocketList, _debug);\n          _as.setEntityId(entityId);\n          let prev = connprofile.returnBundle();\n          if(!prev) {\n            prev = [];\n          }\n          connprofile.setBundle('bundle_entities', prev.concat(entityId));\n          _ASockets[entityId] = _as;\n          callback(false, _ASockets[entityId]);\n        }\n        else{\n          callback(new Error('Could not create this entity for some reason.'));\n        }\n      });\n    };\n\n    this.emitASClose = (entityId)=> {\n      _ASockets[entityId].remoteClosed = true;\n      _ASockets[entityId]._emitClose();\n    };\n\n    this.emitASData = (entityId, data)=> {\n      _ASockets[entityId]._emitData(data);\n    };\n\n    this.emitBSFReturn = (entityId, err, tempid, returnvalue, meta)=> {\n      _ASockets[entityId]._emitBSFReturn(err, tempid, returnvalue, meta);\n    };\n\n    this.emitSFReturn = (entityId, err, tempid, returnvalue)=> {\n      _ASockets[entityId]._emitSFReturn(err, tempid, returnvalue);\n    };\n\n    this.emitASData = (entityId, data)=> {\n      _ASockets[entityId]._emitData(data);\n    };\n\n    this.emitASEvent = (entityId, event, data)=> {\n      _ASockets[entityId]._emitEvent(event, data);\n    };\n\n    this.emitASBlobEvent = (entityId, event, blob, meta)=> {\n      _ASockets[entityId]._emitBlobEvent(event, blob, meta);\n    };\n\n    this.launchActivitySocketByEntityId = (entityId)=> {\n      _ASockets[entityId].launch();\n    };\n\n    this.emitConnectionClose = (connprofile, callback) => {\n      let _entitiesId = connprofile.returnBundle('bundle_entities');\n      for(let i in _entitiesId) {\n        _ASockets[_entitiesId[i]]._emitClose();\n        setTimeout(()=>{\n          // for worker abort referance\n          if(_ASockets[_entitiesId[i]]) {\n            _ASockets[_entitiesId[i]].worker_cancel_refer = true;\n            delete _ASockets[_entitiesId[i]];\n          }\n        }, ActivitySocketDestroyTimeout);\n      }\n      callback(false);\n    };\n\n    this.setDefaultUsername = (username)=> {\n      _admin_name = username;\n    };\n\n    this.setDebug = (debug)=> {\n      _debug = debug;\n    };\n\n    this.importDaemonAuthKey = (key) => {\n      _daemon_auth_key = key;\n    };\n\n    this.on = (event, callback)=> {\n      _on_handler[event] = callback;\n    };\n\n    this.close = ()=> {\n      ActivitySocketDestroyTimeout = 1000;\n      for(let i in _ASockets) {\n        _ASockets[i].worker_cancel_refer = true;\n        delete _ASockets[i];\n      }\n      _ASockets = {};\n      _emmiter = null;\n      _admin_name = 'admin';\n      _daemon_auth_key = null;\n      _debug = false;\n       _on_handler = {};\n    };\n  };\n\n  // Handling responses to authorization requests.\n  function AuthorizationHandler() {\n\n    this.importImplementation = (Implementation)=> {\n      this.AuthbyPassword = (...args)=> {Implementation.returnImplement('AuthbyPassword').apply(null, args)};\n      this.AuthbyToken = (...args)=> {Implementation.returnImplement('AuthbyToken').apply(null, args)};\n      this.AuthbyTokenFailed = (...args)=> {Implementation.returnImplement('AuthbyTokenFailed').apply(null, args)};\n      this.Signin = (...args)=> {Implementation.returnImplement('signin').apply(null, args)};\n\n    };\n\n    this.close = () =>{\n\n    }\n  };\n\n  function Implementation() {\n\n    let _implts = {\n      // NOOXY service protocol sercure end\n      // return for Server\n      AuthbyToken: () => {\n        Utils.TagLog('*ERR*', 'AuthbyToken not implemented');\n      },\n\n      AuthbyTokenFailed: () => {\n        Utils.TagLog('*ERR*', 'AuthbyTokenFailed not implemented');\n      },\n\n      // return for Server\n      AuthbyPassword: () => {\n        Utils.TagLog('*ERR*', 'AuthbyPassword not implemented');\n      },\n\n      AuthbyPasswordFailed: () => {\n        Utils.TagLog('*ERR*', 'AuthbyPasswordFailed not implemented');\n      },\n\n      // return for Client\n      signin: () => {\n        Utils.TagLog('*ERR*', 'signin not implemented');\n      },\n\n      // return for Client\n      signup: () => {\n        Utils.TagLog('*ERR*', 'signup not implemented');\n      },\n\n      onToken: () => {\n        Utils.TagLog('*ERR*', 'onToken not implemented');\n      }\n    };\n\n\n    this.onToken = (connprofile, status, username, token)=> {\n      _implts['onToken'](status, token, username);\n    };\n\n    this.setImplement = (name, callback) => {\n      _implts[name] = callback;\n    };\n\n    this.returnImplement = (name) => {\n      return _implts[name];\n    };\n\n    this.getImplement = (name, callback) => {\n      callback(false, _implts[name]);\n    };\n\n    this.returnImplementBundle = () => {\n      return _implts;\n    };\n\n    this.getClientConnProfile = ()=> {\n\n    };\n\n    this.close = () => {};\n  }\n\n  // NOOXY service protocol secure\n  function NSPS() {\n    let _rsa_pub;\n    let _rsa_priv;\n    let _resumes = {};\n    let _crypto_module;\n    let _operation_timeout = 60; // seconds\n\n    this.emitRequest = () => {console.log('[*ERR*] emitRequest not implemented');};\n\n    // Nooxy service protocol secure request ClientSide\n    // in client need to be in implementation module\n    this.RequestHandler = (connprofile, blob) => {\n      let data = JSON.parse(Buf.decode(blob));\n      let host_rsa_pub = data.p;\n      let client_random_num = _crypto_module.returnRandomInt(99999);\n      connprofile.setBundle('host_rsa_pub_key', host_rsa_pub);\n      _crypto_module.generateAESCBC256KeyByHash(host_rsa_pub, client_random_num, (err, aes_key) => {\n        connprofile.setBundle('aes_256_cbc_key', aes_key);\n        let _data = {\n          r: client_random_num,\n          a: aes_key// aes key to vertify\n        };\n        _crypto_module.encryptString('RSA2048', host_rsa_pub, JSON.stringify(_data), (err, encrypted)=> {\n          if(err) {\n            console.log(err);\n          }\n          else {\n            this.sendRouterData(connprofile, 'SP', 'rs', Buf.encode(JSON.stringify(encrypted)));\n            connprofile.setBundle('NSPS', true);\n          }\n\n        });\n      });\n    };\n\n    this.encrypt = (connprofile, blob, callback)=> {\n      connprofile.getBundle('aes_256_cbc_key', (err, key)=>{\n        _crypto_module.encrypt('AESCBC256', key, blob, (err, encrypted)=> {\n          callback(err, encrypted);\n        });\n      });\n    };\n\n    this.decrypt = (connprofile, blob, callback)=> {\n      if(connprofile.returnBundle('NSPS') === 'pending') {\n        let method = Buf.decode(blob.slice(0, 2));\n        if(method === 'SP') {\n          let session = Buf.decode(blob.slice(2, 4));\n          if(session === 'rs') {\n            let data = blob.slice(4);\n            this.ResponseHandler(connprofile, data);\n          }\n        }\n        else {\n          _resumes[connprofile.returnGUID()].push(()=> {callback(false, blob)});\n        }\n      }\n      else if(connprofile.returnBundle('NSPS') != true && connprofile.returnRemotePosition() === 'Client') {\n        this.upgradeConnection(connprofile, (err, succeess)=>{\n          if(succeess) {\n            callback(false, blob);\n          }\n          else {\n            connprofile.closeConnetion();\n          }\n          if(err) {\n            console.log(err);\n          }\n        });\n      }\n      else if(connprofile.returnBundle('NSPS') != true  && connprofile.returnRemotePosition() === 'Server') {\n        let method = Buf.decode(blob.slice(0, 2));\n        if(method === 'SP') {\n          let session = Buf.decode(blob.slice(2, 4));\n          if(session === 'rq') {\n            let data = blob.slice(4);\n            this.RequestHandler(connprofile, data);\n          }\n        }\n        else {\n          callback(false, blob);\n        }\n\n      }\n      else if(connprofile.returnBundle('NSPS') === true) {\n        _crypto_module.decrypt('AESCBC256', connprofile.returnBundle('aes_256_cbc_key'), blob, (err, decrypted)=> {\n          callback(err, decrypted);\n        });\n      }\n    };\n\n    this.isConnectionSecured = (connprofile, callback)=> {\n      connprofile.getBundle('NSPS', (err, NSPS)=>{\n        // if(NSPS === 'finalize') {\n        //   connprofile.setBundle('NSPS', true);\n        //   callback(false);\n        // }\n        // else {\n          callback(NSPS);\n        // }\n      });\n    };\n\n    this.upgradeConnection = (connprofile, callback) => {\n      _resumes[connprofile.returnGUID()] = [callback];\n      // operation timeout\n      setTimeout(()=>{\n        delete _resumes[connprofile.returnGUID()];\n      }, _operation_timeout*1000);\n\n      let _data = {\n        p: _rsa_pub// RSA publicKey\n      };\n      connprofile.setBundle('NSPS', 'pending');\n      this.sendRouterData(connprofile, 'SP', 'rq', Buf.encode(JSON.stringify(_data)));\n    }\n\n    this.importOperationTimeout = (timeout) => {\n      _operation_timeout = timeout;\n    };\n\n    this.importCryptoModule = (crypto_module) => {\n      _crypto_module = crypto_module;\n    }\n\n    this.importRSA2048KeyPair = (rsa_priv, rsa_pub) => {\n      _rsa_priv = rsa_priv;\n      _rsa_pub = rsa_pub;\n    };\n\n    this.close = () => {\n      _rsa_pub = null;\n      _rsa_priv = null;\n      _resumes = {};\n      _crypto_module = null;\n    };\n  };\n\n  // NOOXY crypto Client version\n  function NoCrypto() {\n    // to base64\n    let _algo = {\n      // key is in length 32 char\n      AESCBC256: {\n        encryptString: (keystr, toEncrypt, callback) => {\n          window.crypto.subtle.importKey(\n              \"raw\", //can be \"jwk\" or \"raw\"\n              new TextEncoder('utf-8').encode(keystr),\n              {   //this is the algorithm options\n                  name: \"AES-CBC\",\n              },\n              false, //whether the key is extractable (i.e. can be used in exportKey)\n              [\"encrypt\", \"decrypt\"] //can be \"encrypt\", \"decrypt\", \"wrapKey\", or \"unwrapKey\"\n          )\n          .then((key)=>{\n            let iv = new Uint8Array(16);\n            window.crypto.getRandomValues(iv);\n            toEncrypt = new TextEncoder('utf-8').encode(toEncrypt);\n            window.crypto.subtle.encrypt(\n              {\n                  name: \"AES-CBC\",\n                  iv: iv, //The initialization vector you used to encrypt\n              },\n              key, //from generateKey or importKey above\n              toEncrypt //ArrayBuffer of the data\n            )\n            .then((encrypted)=>{\n              callback(false, Utils.ArrayBuffertoBase64(iv)+Utils.ArrayBuffertoBase64(encrypted));\n            })\n            .catch((err2)=>{\n              console.error(err2);\n            });\n          })\n          .catch((err)=>{\n              console.error(err);\n          });\n        },\n        decryptString: (keystr, toDecrypt, callback) => {\n          window.crypto.subtle.importKey(\n              \"raw\", //can be \"jwk\" or \"raw\"\n              new TextEncoder('utf-8').encode(keystr),\n              {   //this is the algorithm options\n                  name: \"AES-CBC\",\n              },\n              false, //whether the key is extractable (i.e. can be used in exportKey)\n              [\"encrypt\", \"decrypt\"] //can be \"encrypt\", \"decrypt\", \"wrapKey\", or \"unwrapKey\"\n          )\n          .then((key)=>{\n            let iv = Utils.Base64toArrayBuffer(toDecrypt.substring(0, 24));\n            toDecrypt = Utils.Base64toArrayBuffer(toDecrypt.substring(24));\n            window.crypto.subtle.decrypt(\n              {\n                  name: \"AES-CBC\",\n                  iv: iv, //The initialization vector you used to encrypt\n              },\n              key, //from generateKey or importKey above\n              toDecrypt //ArrayBuffer of the data\n            )\n            .then((decrypted)=>{;\n              callback(false, new TextDecoder('utf-8').decode(decrypted));\n            })\n            .catch((err2)=>{\n              console.error(err2);\n            });\n          })\n          .catch((err)=>{\n              console.error(err);\n          });\n        },\n        encrypt: (keystr, toEncrypt, callback) => {\n          window.crypto.subtle.importKey(\n              \"raw\", //can be \"jwk\" or \"raw\"\n              new TextEncoder('utf-8').encode(keystr),\n              {   //this is the algorithm options\n                  name: \"AES-CBC\",\n              },\n              false, //whether the key is extractable (i.e. can be used in exportKey)\n              [\"encrypt\", \"decrypt\"] //can be \"encrypt\", \"decrypt\", \"wrapKey\", or \"unwrapKey\"\n          )\n          .then((key)=>{\n            let iv = new Uint8Array(16);\n            let salt = new Uint8Array(64);\n            window.crypto.getRandomValues(iv);\n            window.crypto.getRandomValues(salt);\n            window.crypto.subtle.encrypt(\n              {\n                  name: \"AES-CBC\",\n                  iv: iv, //The initialization vector you used to encrypt\n              },\n              key, //from generateKey or importKey above\n              Buf.concat([salt, toEncrypt]) //ArrayBuffer of the data\n            )\n            .then((encrypted)=>{\n              try {\n                callback(false, Buf.concat([iv, new Uint8Array(encrypted)]));\n              }\n              catch (e) {\n                console.log(e);\n              }\n            })\n            .catch((err2)=>{\n              console.error(err2);\n            });\n          })\n          .catch((err)=>{\n              console.error(err);\n          });\n        },\n        decrypt: (keystr, toDecrypt, callback) => {\n          window.crypto.subtle.importKey(\n              \"raw\", //can be \"jwk\" or \"raw\"\n              new TextEncoder('utf-8').encode(keystr),\n              {   //this is the algorithm options\n                  name: \"AES-CBC\",\n              },\n              false, //whether the key is extractable (i.e. can be used in exportKey)\n              [\"encrypt\", \"decrypt\"] //can be \"encrypt\", \"decrypt\", \"wrapKey\", or \"unwrapKey\"\n          )\n          .then((key)=>{\n            let iv = toDecrypt.slice(0, 16);\n            window.crypto.subtle.decrypt(\n              {\n                  name: \"AES-CBC\",\n                  iv: iv, //The initialization vector you used to encrypt\n              },\n              key, //from generateKey or importKey above\n              toDecrypt.slice(16) //ArrayBuffer of the data\n            )\n            .then((decrypted)=>{;\n              try {\n                callback(false, new Uint8Array(decrypted.slice(64)));\n              }\n              catch(e) {\n                console.log(e);\n              }\n            })\n            .catch((err2)=>{\n              console.error(err2.message);\n            });\n          })\n          .catch((err)=>{\n              console.error(err.message);\n          });\n        }\n      },\n\n      // Keys is in pem format\n      RSA2048: {\n        encryptString: (publicKey, toEncrypt, callback) => {\n          window.crypto.subtle.importKey(\n            \"spki\", //can be \"jwk\" (public or private), \"spki\" (public only), or \"pkcs8\" (private only)\n            Utils.convertPemToBinary(publicKey),\n            {   //these are the algorithm options\n                name: \"RSA-OAEP\",\n                hash: {name: \"SHA-1\"}, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n            },\n            false, //whether the key is extractable (i.e. can be used in exportKey)\n            [\"encrypt\"] //\"encrypt\" or \"wrapKey\" for public key import or\n                        //\"decrypt\" or \"unwrapKey\" for private key imports\n          )\n          .then((key)=> {\n              //returns a publicKey (or privateKey if you are importing a private key)\n            window.crypto.subtle.encrypt({\"name\": \"RSA-OAEP\"}, key, new TextEncoder('utf-8').encode(toEncrypt)).then((encrypted)=>{\n              callback(false, Utils.ArrayBuffertoBase64(encrypted));\n            });\n\n          })\n          .catch((err)=>{\n              console.log(err);\n          });\n\n        }\n      },\n\n    };\n\n    this.returnRandomInt = (max) => {\n      return Math.floor(Math.random() * Math.floor(max));\n    }\n\n    // hashing two string (host and client pub key)by SHA256 to get AES-CBC 256 key 32 char\n    this.generateAESCBC256KeyByHash = (string1, string2, callback) => {\n      window.crypto.subtle.digest(\"SHA-256\", new TextEncoder('utf-8').encode(string1+string2)).then((hash)=> {\n        callback(false, (Utils.ArrayBuffertoBase64(hash)).substring(0, 32));\n      });\n    };\n\n    this.encryptString = (algo, key, toEncrypt, callback) => {\n      try{\n        _algo[algo].encryptString(key, toEncrypt, callback);\n      }\n      catch(e) {\n        callback(e);\n      }\n\n    };\n\n    this.decryptString = (algo, key, toDecrypt, callback) => {\n      try {\n        _algo[algo].decryptString(key, toDecrypt, callback);\n      }\n      catch(e) {\n        callback(e);\n      }\n\n    };\n\n    this.encrypt = (algo, key, toEncrypt, callback) => {\n      try{\n        _algo[algo].encrypt(key, toEncrypt, callback);\n      }\n      catch(e) {\n        callback(e);\n      }\n\n    };\n\n    this.decrypt = (algo, key, toDecrypt, callback) => {\n      try {\n        _algo[algo].decrypt(key, toDecrypt, callback);\n      }\n      catch(e) {\n        callback(e);\n      }\n    };\n\n    this.close = () => {};\n  }\n\n  function NoServiceClientCore() {\n    let verbose = (tag, log) => {\n      if(settings.verbose||settings.debug) {\n        Utils.TagLog(tag, log);\n      };\n    };\n    // setup variables\n    verbose('Core', 'Setting up variables.')\n    let _connection = new Connection({allow_ssl_self_signed: false});\n    let _authorizationhandler = new AuthorizationHandler();\n    let _router = new Router();\n    let _activity = new Activity();\n    let _implementation = new Implementation();\n    let _nsps = new NSPS();\n    let _nocrypto = new NoCrypto;\n\n    this.setupDefaultImplementation = ()=> {\n      verbose('Core', 'Setting up DefaultImplementation.');\n      this.importOwner(getCookie('NSUser'));\n      // setup NoService Auth implementation\n      _implementation.setImplement('signin', (connprofile, data, emitResponse)=>{\n        window.location.replace(settings.NSc_files_root+'login.html?conn_method='+settings.connmethod+'&remote_ip='+settings.targetip+'&port='+settings.targetport+'&redirect='+window.location.href);\n        // window.open('.html.html?conn_method='+conn_method+'&remote_ip='+remote_ip+'&port='+port);\n      });\n\n      _implementation.setImplement('onToken', (err, token)=>{\n        setCookie('NSToken', token, 7);\n        if(Utils.getQueryVariable('redirect')) {\n          window.location.replace(Utils.getQueryVariable('redirect'));\n        }\n      });\n\n      _implementation.setImplement('setUser', (err, username)=>{\n        setCookie('NSUser', username, 365);\n        if(!username) {\n          eraseCookie('NSUser');\n        }\n      });\n\n      _implementation.setImplement('logout', (err, Username)=>{\n        eraseCookie('NSUser');\n        eraseCookie('NSToken');\n        window.location.reload();\n      });\n\n      _implementation.setImplement('AuthbyTokenFailed', (connprofile, data, emitResponse)=>{\n        _implementation.returnImplement('signin')(connprofile, data, emitResponse, 'token');\n      });\n\n      // setup NoService Auth implementation\n      _implementation.setImplement('AuthbyToken', (connprofile, data, emitResponse) => {\n        let callback = (err, token)=>{\n          let _data = {\n            m:'TK',\n            d:{\n              t: data.d.t,\n              v: token\n            }\n          }\n          emitResponse(connprofile, _data);\n        };\n\n        let pass = true;\n        if(!getCookie('NSToken')) {\n          _implementation.returnImplement('signin')(connprofile, data, emitResponse, 'token');\n        }\n        else {\n          callback(false, getCookie('NSToken'));\n        }\n\n      });\n      // setup NoService Auth implementation\n\n      _implementation.setImplement('AuthbyPassword', (connprofile, data, emitResponse) => {\n        window.open(settings.NSc_files_root+'password.html?conn_method='+settings.connmethod+'&remote_ip='+settings.targetip+'&port='+settings.targetport+'&username='+settings.user+'&authtoken='+data.d.t+'&redirect='+window.location.href);\n      });\n\n      _implementation.getDefaultClientConnProfile = (callback) => {\n        _connection.createClient(settings.connmethod, settings.targetip, settings.targetport, callback);\n      }\n\n      verbose('Core', 'Setting up DefaultImplementation done.');\n\n    };\n\n    this.launch = () => {\n      // create gateway\n      verbose('Core', 'Creating coregateway...')\n      let coregateway = {\n          Settings: settings,\n          AuthorizationHandler: _authorizationhandler,\n          Activity : _activity,\n          Connection: _connection,\n          Router: _router,\n          Utilities: Utils,\n          Implementation: _implementation,\n          NoCrypto: _nocrypto,\n          NSPS: _nsps\n        };\n      verbose('Core', 'Creating coregateway done.');\n\n      _connection.setDebug(settings.debug);\n      _connection.importConnectionMethodNameMap(Constants.CONNECTION_METHOD_NAME_MAP);\n\n      // setup NOOXY Service protocol secure\n      _nsps.importCryptoModule(_nocrypto);\n\n      // setup router\n      if(settings.debug) {\n        _router.addJSONSniffer((err, json)=> {\n          Utils.TagLog('DEBUG', json);\n        });\n      }\n      _router.importCore(coregateway);\n\n      // setup AuthorizationHandler\n      _authorizationhandler.importImplementation(_implementation);\n\n      // setup service\n      _activity.setDebug(settings.debug);\n\n      verbose('Core', 'Setting up variables done.');\n      //\n      verbose('Core', 'NoService client started.');\n    }\n\n    this.logout = ()=> {\n      _implementation.returnImplement('logout')();\n    };\n\n    this.getImplementationModule = (callback) => {\n      callback(false, _implementation);\n    };\n\n    this.createActivitySocket = (method, targetip, targetport, service, callback) => {\n      _activity.createActivitySocket(method, targetip, targetport, service, settings.user, callback);\n    };\n\n    this.importOwner = (uname)=> {\n      settings.user = uname;\n    };\n\n    this.returnOwner = ()=> {\n      return settings.user;\n    }\n  }\n\n  // NoService Modules end\n\n  let _core = new NoServiceClientCore();\n\n  this.connect = ()=> {};\n  // NSc methods\n  this.setDebug = (boo)=>{\n    settings.debug = boo;\n  }\n  this.createActivitySocket = (service, callback) => {\n    _core.createActivitySocket(settings.connmethod, settings.targetip, settings.targetport, service, callback);\n  };\n  this.setUsername = (uname)=>{\n    _core.importOwner(uname);\n  }\n  this.returnUsername = ()=>{\n    return _core.returnOwner();\n  };\n  this.logout = ()=> {\n    _core.logout();\n  };\n  this.getImplementationModule = (callback)=> {\n    _core.getImplementationModule(callback);\n  };\n  this.init = (targetip, method, targetport) => {\n    if(targetip) {\n      settings.targetip = targetip;\n    }\n\n    // if(settings.debug) {\n    //   settings.connmethod = 'WebSocket';\n    //   settings.targetport = 43582;\n    // }\n\n    if(method) {\n      settings.connmethod = method;\n    }\n\n    if(method === 'WebSocketSecure') {\n      settings.targetport = 43581;\n    }\n    else if (method ==='WebSocket') {\n      settings.targetport = 43582;\n    }\n\n    if(targetport) {\n      settings.targetport = targetport;\n    }\n\n    Utils.printLOGO(Constants.version, Constants.copyright);\n\n    Utils.TagLog('Init', 'host: nsp('+settings.connmethod+')://'+targetip+':'+settings.targetport);\n    _core.setupDefaultImplementation();\n\n    try {\n      _core.launch();\n    }\n    catch(e) {\n      settings.connmethod = 'WebSocket';\n      _core.launch();\n    }\n\n  };\n  this.init(targetip, method, targetport);\n};\n\n// module.exports = NSc;\nexport default NSc;\n","// /src/flux/index.js\n// Description:\n// \"index.js\"\n// Copyright 2018-2020 NOOXY. All Rights Reserved.\n\nimport Constants from './constants.json';\nimport Dispatcher from './dispatcher';\nimport Service from './service';\nimport NSClient from './NSc.js';\n\nconst debug = Constants.DEBUG;\nconst nsport = null;\n\nconst NoService = new NSClient(Constants.settings.noservice.host, Constants.settings.noservice.conn);\n\nfunction Flux(setState) {\n  let _noservice_client;\n\n  this.Dispatcher = Dispatcher.generateDispatcher(setState);\n  this.NoService = NoService;\n  this.Service = new Service(NoService, this.Dispatcher);\n  this.Service.enqueueSnackbar = this.enqueueSnackbar;\n  this.Actions = this.Service.Actions;\n\n  this.start = (next)=> {\n    this.Service.start(next);\n  };\n};\n\nexport default Flux;\n","import React, { Component } from 'react';\n\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Button from '@material-ui/core/Button';\n\n// card\nimport {Card, CardContent, CardActions} from '@material-ui/core/';\nimport {List, ListItem, ListItemIcon, ListItemText, ListSubheader} from '@material-ui/core/';\nimport Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\nimport Divider from '@material-ui/core/Divider';\n\nimport PersonIcon from '@material-ui/icons/Person';\nimport CodeIcon from '@material-ui/icons/Code';\n\nconst useStyles = makeStyles({\n  avatar: {\n    marginBottom: 20,\n    width: 70,\n    height: 70,\n  },\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nconst capitalize = (s) => {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nexport function HomePage(props) {\n  const classes = useStyles();\n  return(\n      <Grid container justify=\"center\" alignItems=\"center\" spacing={5}>\n        <Grid item xs={11}>\n          <Avatar className={classes.avatar}>{props.user_meta.username?props.user_meta.username.slice(0, 3):null}</Avatar>\n          <Typography  variant=\"h5\" component=\"h2\">\n            {'Hello, '+ props.localize.welcome + ' ' + props.user_meta.firstname + ' ' + props.user_meta.lastname}\n          </Typography>\n\n          <Typography  variant=\"p\" component=\"p\">\n            {\"You can manage your personal infomation in this account page.\"}\n          </Typography>\n        </Grid>\n        <Grid item xs={11}>\n          <Card className={classes.homeCard}>\n            <CardContent>\n              <Typography  variant=\"h5\" component=\"h2\">\n                {capitalize(props.localize.quick_access)}\n              </Typography>\n              <List className={classes.root}>\n                <ListItem>\n                  <ListItemIcon>\n                    <PersonIcon />\n                  </ListItemIcon>\n                  <ListItemText primary={'Identity'} secondary={'your identities are displayed below.'}/>\n                  <Button  color=\"primary\">Edit</Button>\n                </ListItem>\n                <Divider component=\"li\" />\n                <ListItem>\n                  <ListItemText primary={props.localize.username} secondary={props.user_meta.username}/>\n                </ListItem>\n                <ListItem>\n                  <ListItemText primary={props.localize.firstname} secondary={props.user_meta.firstname}/>\n                </ListItem>\n                <ListItem>\n                  <ListItemText primary={props.localize.lastname} secondary={props.user_meta.lastname}/>\n                </ListItem>\n                <ListItem>\n                  <ListItemText primary={props.localize.userid} secondary={props.user_meta.userid}/>\n                </ListItem>\n\n                <Divider component=\"li\" />\n                <ListItem>\n                  <ListItemIcon>\n                    <PersonIcon />\n                  </ListItemIcon>\n                  <ListItemText primary={'Contact method'} secondary={'how do people keep in touch with you?'}/>\n                  <Button  color=\"primary\">Edit</Button>\n                </ListItem>\n                <Divider component=\"li\" />\n\n\n                <ListItem>\n                  <ListItemText primary={props.localize.phone_number} secondary={props.user_meta.phonenumber}/>\n                </ListItem>\n                <ListItem>\n                  <ListItemText primary={props.localize.email} secondary={props.user_meta.email}/>\n                </ListItem>\n                <Divider component=\"li\" />\n\n                <ListItem>\n                  <ListItemIcon>\n                    <CodeIcon />\n                  </ListItemIcon>\n                  <ListItemText primary={'Developer options'} secondary={'manage noservice with below options.'}/>\n                </ListItem>\n                <Divider component=\"li\" />\n                <ListItem>\n                  <ListItemText primary={props.localize.noshell} secondary={'NOOXY shell'}/>\n                </ListItem>\n                <Divider component=\"li\" />\n              </List>\n            </CardContent>\n            <CardActions>\n\n            </CardActions>\n          </Card>\n        </Grid>\n      </Grid>\n  )\n};\n","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'copyright©2017-'+new Date().getFullYear()+' NOOXY inc. '}\n      <Link color=\"inherit\" href=\"https://nooxy.org/\">\n        nooxy.org\n      </Link>{' '}\n\n      {'.'}\n    </Typography>\n  );\n}\n\nconst getQueryVariable = (variable)=>\n{\n       let query = window.location.search.substring(1);\n       let vars = query.split(\"&\");\n       for (let i=0;i<vars.length;i++) {\n               let pair = vars[i].split(\"=\");\n               if(pair[0] === variable){return pair[1];}\n       }\n       return(false);\n}\n\nconst setCookie = (cname, cvalue, exdays)=> {\n  let d = new Date();\n  d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));\n  let expires = \"expires=\"+d.toUTCString();\n  document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n}\n\nconst useStyles = makeStyles(theme => ({\n  '@global': {\n    body: {\n      backgroundColor: theme.palette.common.white,\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport function SignInPage(props) {\n  const classes = useStyles();\n  const [username, setUsername] = React.useState();\n  const [password, setPassword] = React.useState();\n  const [status, setStatus] = React.useState('Please enter your username and password to access our service.');\n\n  let updatePasswordInputValue = (evt)=> {\n    setPassword(evt.target.value);\n  }\n\n  let updateUsernameInputValue = (evt)=> {\n    setUsername(evt.target.value);\n  }\n\n  let signin = ()=> {\n    try{\n      props.NSc.getImplementationModule((err, implement_module)=>{\n        implement_module.getDefaultClientConnProfile((err, connprofile) => {\n\n          let _data = {\n            u: username,\n            p: password\n          }\n          implement_module.returnImplement('setUser')(false, _data.u);\n          implement_module.setImplement('onToken', (err, token)=>{\n            if(token) {\n              setCookie('NSToken', token, 7);\n              setTimeout(props.onFinish, 500);\n            }\n            else {\n              setStatus('Wrong username or password!');\n            }\n          });\n          implement_module.emitRequest(connprofile, 'GT', _data);\n\n        });\n      });\n    }\n    catch(e) {\n      console.log(e);\n    }\n\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          NOOXY Service Login\n        </Typography>\n        <Typography component=\"p\" variant=\"p\">\n          {status}\n        </Typography>\n        <form className={classes.form} noValidate>\n          <TextField\n            onChange={evt => updateUsernameInputValue(evt)}\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"username\"\n            label=\"Username\"\n            name=\"username\"\n            autoComplete=\"username\"\n            autoFocus\n          />\n          <TextField\n            onChange={evt => updatePasswordInputValue(evt)}\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n          />\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            preventDefault\n            onClick={signin}\n          >\n            Sign In\n          </Button>\n          <Grid container>\n            <Grid item xs>\n              <Link href=\"#\" variant=\"body2\">\n                Forgot password?\n              </Link>\n            </Grid>\n            <Grid item>\n              <Link href=\"#\" variant=\"body2\">\n                {\"Don't have an account? Sign Up\"}\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={8}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}\n\nexport function PasswordPage(props) {\n  const classes = useStyles();\n  const [password, setPassword] = React.useState();\n  const [status, setStatus] = React.useState('In order to access this service. You must enter your password of your account.');\n\n  let updatePasswordInputValue = (evt)=> {\n    setPassword(evt.target.value);\n  }\n\n  let signin = ()=> {\n    props.NSc.getImplementationModule((err, implement_module)=>{\n    implement_module.getDefaultClientConnProfile((err, connprofile) => {\n      let _data = {\n        m: 'PW',\n        d: {\n          t: getQueryVariable('authtoken'),\n          v: password\n        }\n      }\n      implement_module.sendRouterData(connprofile, 'AU', 'rs', new Uint8Array(new TextEncoder('utf-8').encode(JSON.stringify(_data))));\n      setTimeout(props.onFinish, 500);\n    });\n  });\n\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          NOOXY Service Login\n        </Typography>\n        <Typography component=\"p\" variant=\"p\">\n          {status}\n        </Typography>\n        <form className={classes.form} noValidate>\n          <TextField\n            value={props.NSc.returnUsername()?props.NSc.returnUsername():'null'}\n            InputProps={{\n              readOnly: true,\n            }}\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"username\"\n            label=\"Username\"\n            name=\"username\"\n            autoComplete=\"username\"\n          />\n          <TextField\n            onChange={evt => updatePasswordInputValue(evt)}\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            autoFocus\n          />\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            preventDefault\n            onClick={signin}\n          >\n            Sign In\n          </Button>\n          <Grid container>\n            <Grid item xs>\n              <Link href=\"#\" variant=\"body2\">\n                Forgot password?\n              </Link>\n            </Grid>\n            <Grid item>\n              <Link href=\"#\" variant=\"body2\">\n                {\"Don't have an account? Sign Up\"}\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={8}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport { BrowserRouter as Router, Route, Link, Redirect, Switch } from \"react-router-dom\";\n\n// Flux\nimport Flux from '../flux'\nimport Localizes from '../flux/data/localizes.json'\n\nimport {HomePage} from '../components/HomePage';\nimport {SignInPage, PasswordPage} from '../components/AuthPages';\n\n\nimport { withStyles } from '@material-ui/core/styles';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport Divider from '@material-ui/core/Divider';\nimport Avatar from '@material-ui/core/Avatar';\nimport Hidden from '@material-ui/core/Hidden';\n\nimport Grid from '@material-ui/core/Grid';\n// card\nimport {Card, CardContent, CardActions} from '@material-ui/core/';\n\n// color\nimport blue from '@material-ui/core/colors/blue';\n\n// list\nimport {List, ListItem, ListItemIcon, ListItemText, ListItemAvatar} from '@material-ui/core/';\n\n// icons\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AccountIcon from '@material-ui/icons/AccountCircle';\nimport CodeIcon from '@material-ui/icons/Code';\nimport HomeIcon from '@material-ui/icons/Home';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\n\nconst CONSTANTS = require('../flux/constants.json');\nconst ROOT_PATH = CONSTANTS.settings.root_path;\n\n\nconst styles = theme=> ({\n  root: {\n    display: 'flex',\n    minHeight: '100%',\n    minWidth: '100%'\n  },\n  headerBar: {\n    backgroundColor: \"white\",\n    boxShadow: \"none\"\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: 250,\n      flexShrink: 0,\n    },\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n  title: {\n    display: 'block',\n    color: 'black'\n  },\n\n  drawerList: {\n    width: 250,\n  },\n\n  homeCard: {\n    width: \"100%\",\n    display: \"inline-block\",\n    marginTop: 5,\n    marginBottom: 15,\n    verticalAlign: \"top\",\n  },\n\n  homeCardWrapper: {\n    columnCount: 2,\n    columnGap: 20,\n    padding: \"0 20px\",\n    [theme.breakpoints.down('sm')]: {\n     columnCount: 1,\n   },\n   toolbar: theme.mixins.toolbar,\n  }\n})\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: blue[500] }, // Purple and green play nicely together.\n    secondary: { main: '#11cb5f' }, // This is just green.A700 as hex.\n  },\n\n  typography: { useNextVariants: true },\n\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  }\n\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.controller = new Flux(this.setState.bind(this));\n    this.actions = this.controller.Actions;\n    this.state= {\n      lang: 'en',\n      localizes: Localizes,\n      DrawerOpened: false,\n      UserMeta: {}\n    }\n  }\n\n  componentDidMount() {\n    this.controller.NoService.getImplementationModule((err, NSimplementation)=>{\n      this.actions.log('NoService', 'Connecting to NOOXY service.');\n      NSimplementation.setImplement('signin', (connprofile, data, data_sender)=>{\n        this.actions.log('NoService Auth', 'NOOXY service signin emitted.');\n        this.history.push('/noservice/signin');\n      });\n      NSimplementation.setImplement('AuthbyPassword', (connprofile, data, data_sender) => {\n        this.actions.log('NoService Auth', 'NOOXY service Authby Password emitted.');\n        this.history.push('/noservice/password?authtoken='+data.d.t);\n      });\n      this.controller.start(()=> {\n        console.log('background started.');\n      });\n    });\n  }\n\n  toggleDrawer = (bool)=> ()=> {\n    this.setState({DrawerOpened: bool});\n  }\n\n  render() {\n    const {classes} = this.props;\n\n    const sideList = (\n      <div className={classes.drawerList}>\n        <ListItem button>\n          <ListItemText primary={'NoService '+this.state.localizes[this.state.lang].account}/>\n        </ListItem>\n        <ListItem button>\n          <ListItemAvatar><Avatar>M</Avatar></ListItemAvatar>\n          <ListItemText primary={this.state.UserMeta.username} />\n        </ListItem>\n        <Divider />\n        <ListItem button>\n          <ListItemIcon><HomeIcon/></ListItemIcon>\n          <ListItemText primary={this.state.localizes[this.state.lang].home} />\n        </ListItem>\n        <ListItem button>\n          <ListItemIcon><AccountIcon/></ListItemIcon>\n          <ListItemText primary={this.state.localizes[this.state.lang].edit_my_account} />\n        </ListItem>\n        <ListItem button onClick={()=> {\n          this.actions.logout();\n        }}>\n          <ListItemIcon><ExitToAppIcon/></ListItemIcon>\n          <ListItemText primary={this.state.localizes[this.state.lang].logout} />\n        </ListItem>\n        <Divider />\n        <List>\n          <ListItem button>\n            <ListItemIcon><CodeIcon/></ListItemIcon>\n            <ListItemText primary={this.state.localizes[this.state.lang].noshell} />\n          </ListItem>\n        </List>\n      </div>\n    )\n\n    return (\n      <Router basename={ROOT_PATH}>\n        <MuiThemeProvider theme={theme}>\n        <Route exact path={':url(.*)'} render={(props)=>{\n          this.history = props.history;\n          return(\n            <div className={classes.root}>\n              <Switch>\n                <Route exact path='/noservice/signin' render={(props)=>{\n                  return(\n                    <SignInPage SignupURL={\"\"} NSc={this.controller.NoService} onFinish={()=>{window.location.replace(ROOT_PATH);}}/>\n                  );\n                }}/>\n                <Route exact path='/noservice/password' render={(props)=>{\n                  return(\n                    <PasswordPage NSc={this.controller.NoService} onFinish={props.history.goBack}/>\n                  );\n                }}/>\n                <Route exact path={':url(.*)'} render={(props)=>{\n                  return(\n                    [\n                      <AppBar className={classes.headerBar} position=\"fixed\">\n                        <Toolbar>\n                          <IconButton className={classes.menuButton} aria-label=\"Open drawer\" onClick={this.toggleDrawer(true)}>\n                            <MenuIcon />\n                          </IconButton>\n                          <Typography className={classes.title} variant=\"h6\" component=\"h1\" noWrap>\n                            {'NoService '+this.state.localizes[this.state.lang].account}\n                          </Typography>\n                        </Toolbar>\n                      </AppBar>\n                      ,\n                      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n                        <Hidden smUp implementation=\"css\">\n                          <SwipeableDrawer\n                           open={this.state.DrawerOpened}\n                           onClose={this.toggleDrawer(false)}\n                           onOpen={this.toggleDrawer(true)}\n                           variant=\"temporary\"\n                          >\n                             {sideList}\n                          </SwipeableDrawer>\n                        </Hidden>\n                        <Hidden xsDown implementation=\"css\">\n                          <SwipeableDrawer\n                            variant=\"permanent\"\n                            open\n                          >\n                             {sideList}\n                          </SwipeableDrawer>\n                        </Hidden>\n                      </nav>\n                      ,\n                      <main className={classes.content}>\n                        <div style= {{minHeight: '40px'}}/>\n                        <Switch>\n                          <Route exact path=\"/\" render={() => {\n                            return(<Redirect to=\"/home/\"/>)\n                          }}/>\n                          <Route exact path=\"/home/\" render={(props)=>{\n                            return(\n                              <HomePage user_meta={this.state.UserMeta} localize={this.state.localizes[this.state.lang]}/>\n                            );\n                          }}/>\n                        </Switch>\n                      </main>\n                    ]\n                  );\n                }}/>\n              </Switch>\n            </div>\n          );\n        }}/>\n\n        </MuiThemeProvider>\n      </Router>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}